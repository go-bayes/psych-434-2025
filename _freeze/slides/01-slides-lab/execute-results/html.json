{
  "hash": "187b13c97ab19df8e1928fe51d88fe0c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 1: Installing and Using R\"\nformat:\n  revealjs: \n    slide-number: true\n    echo: true\n    smaller: true\n    scrollable: true\n    incremental: false\n    chalkboard: true \n    buttons: false\n    preview-links: auto\n    theme: default\n    embed-resources: false\n    code-fold: false\n    code-overflow: scroll\n    code-line-numbers: true\n    auto-stretch: true\n    html-math-method: katex\n    progress: true\n    highlight: kate\n    bibliography: /Users/joseph/GIT/templates/bib/references.bib\n---\n\n\n\n\n### By the end of this lab you will:\n\n1.  Have R and R-studio Downloaded on your machine\n2.  Be able to use R for basic analysis and graphing\n\n### Things To Remember\n\n1.  File names and code should be **legible**\n2.  Learn macros to save time and order your code\n3.  Learning is making mistakes; try first, and then seek help. \n\n## Introduction\n\n- Why learn R?\n- You'll need it for your final report.\n- Supports your psychology coursework.\n- Enhances your coding skills.\n\n## Install R\n\n- Visit the comprehensive r archive network (cran) at [https://cran.r-project.org/](https://cran.r-project.org/)\n- Select the version of r suitable for your operating system (windows, mac, or linux)\n- Download and install it by following the on-screen instructions\n\n\n## Install RStudio\n- Visit rstudio download page at [https://www.rstudio.com/products/rstudio/download/](https://www.rstudio.com/products/rstudio/download/)\n- Choose the free version of rstudio desktop, \n- Download it for your operating system\n- Install and open\n\n## Create new project \n- `file` > `new project`\n- Choose new directory\n- Specify the location where the project folder will be created\n- Click `create project`\n\n## Exercise 1: Install `tidyverse`\n- Open rstudio: launch rstudio on your computer\n- `tools` > `install packages`\n- Type `tidyverse`\n- Click on the install button\n- Type `library(tidyverse)` in the console and press `enter`\n\n## Execut Code\n\n- Use `Ctrl + Enter` (Windows/Linux) or `Cmd + Enter` (Mac).\n\n## Assignment Operator\n\nThe assignment operator in R is `<-`. This operator assigns values to variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10 # assigns the value 10 to x\ny <- 5  # assigns the value 5 to y\n```\n:::\n\n\n\nAlternative assignment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 10\ny = 5\n```\n:::\n\n\n\nComparing values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 == 5 # returns FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n## RStudio Assignment Operator Shortcut\n\n- For macOS: `Option` + `-` inserts `<-`.\n- For Windows and Linux: `Alt` + `-` inserts `<-`.\n\n## Keyboard Shortcuts\n\nExplore keyboard shortcuts in RStudio through `Tools` -> `Keyboard Shortcuts Help`.\n\n## Concatenation\n\nThe `c()` function combines multiple elements into a vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- c(1, 2, 3, 4, 5) # a vector of numbers\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n## Arithmetic Operations\n\nAddition and subtraction in R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum <- x + y\nprint(sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\ndifference <- x - y\nprint(difference)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n## Multiplication and Division\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scalar operations\nproduct <- x * y\nquotient <- x / y\n\n\n# vector multiplication and division\nvector1 <- c(1, 2, 3)\nvector2 <- c(4, 5, 6)\n\n# Vector operations\nvector_product <- vector1 * vector2\nvector_division <- vector1 / vector2\n```\n:::\n\n\n\nBe cautious with division by zero:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- 10 / 0 # Inf\nzero_division <- 0 / 0 # NaN\n```\n:::\n\n\n\nInteger division and modulo operation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninteger_division <- 10 %/% 3\nremainder <- 10 %% 3\n```\n:::\n\n\n\n## Logical Operators\n\nExamples of NOT, NOT EQUAL, and EQUAL operations:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_not_y <- x != y\nx_equal_10 <- x == 10\n```\n:::\n\n\n\nOR and AND operations:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_or <- c(TRUE, FALSE) | c(FALSE, TRUE)\nsingle_or <- TRUE || FALSE\n\nvector_and <- c(TRUE, FALSE) & c(FALSE, TRUE)\nsingle_and <- TRUE && FALSE\n```\n:::\n\n\n\n## Integers\n\n- Whole numbers without decimal points, defined with an `L` suffix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 42L\nstr(x) # check type\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n int 42\n```\n\n\n:::\n:::\n\n\n\n- Conversion to numeric\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.numeric(x)\nstr(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num 42\n```\n\n\n:::\n:::\n\n\n\n## Characters\n\n- Text strings enclosed in quotes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"alice\"\n```\n:::\n\n\n\n## Factors\n\n- Represent categorical data with limited values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors <- factor(c(\"red\", \"blue\", \"green\"))\n```\n:::\n\n\n\n## Ordered Factors\n\n- Factors with and without inherent order\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neducation_levels <- c(\"high school\", \"bachelor\", \"master\", \"ph.d.\")\neducation_factor_no_order <- factor(education_levels, ordered = FALSE)\neducation_factor <- factor(education_levels, ordered = TRUE)\neducation_ordered_explicit <- factor(education_levels, levels = education_levels, ordered = TRUE)\n```\n:::\n\n\n\n- Operations with ordered factors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedu1 <- ordered(\"bachelor\", levels = education_levels)\nedu2 <- ordered(\"master\", levels = education_levels)\nedu2 > edu1 # logical comparison\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n- Modifying ordered factors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_levels <- c(\"primary school\", \"high school\", \"bachelor\", \"master\", \"ph.d.\")\neducation_updated <- factor(education_levels, levels = new_levels, ordered = TRUE)\nstr(education_updated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Ord.factor w/ 5 levels \"primary school\"<..: 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(education_updated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\neducation_updated\nprimary school    high school       bachelor         master          ph.d. \n             0              1              1              1              1 \n```\n\n\n:::\n:::\n\n\n\n## Strings\n\n- Sequences of characters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyou <- 'world!'\ngreeting <- paste(\"hello,\", you)\n# hello world\ngreeting\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello, world!\"\n```\n\n\n:::\n:::\n\n\n\n## Vectors\n\n- Fundamental data structure in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeric_vector <- c(1, 2, 3, 4, 5)\ncharacter_vector <- c(\"apple\", \"banana\", \"cherry\")\nlogical_vector <- c(TRUE, FALSE, TRUE, FALSE)\n```\n:::\n\n\n\n- Manipulating vectors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_sum <- numeric_vector + 10\nvector_multiplication <- numeric_vector * 2\nvector_greater_than_three <- numeric_vector > 3\n```\n:::\n\n\n\n\n## `table()` Function\n\n- Generates frequency tables for categorical data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(vector_greater_than_three)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nvector_greater_than_three\nFALSE  TRUE \n    3     2 \n```\n\n\n:::\n:::\n\n\n\n## Dataframes\n\n- Creating and manipulating data frames\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# clear previous `df` object (if any)\nrm(df)\ndf <- data.frame(\n  name = c(\"alice\", \"bob\", \"charlie\"),\n  age = c(25, 30, 35),\n  gender = c(\"female\", \"male\", \"male\")\n)\n# look at structure\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age gender\n1   alice  25 female\n2     bob  30   male\n3 charlie  35   male\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ name  : chr  \"alice\" \"bob\" \"charlie\"\n $ age   : num  25 30 35\n $ gender: chr  \"female\" \"male\" \"male\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(df$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nfemale   male \n     1      2 \n```\n\n\n:::\n\n```{.r .cell-code}\ntable(df$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n25 30 35 \n 1  1  1 \n```\n\n\n:::\n\n```{.r .cell-code}\ntable(df$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  alice     bob charlie \n      1       1       1 \n```\n\n\n:::\n:::\n\n\n\n## Access Data Frame Elements\n\n- By column name and row/column indexing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# by column name\nnames <- df$name\n# by row and column\nsecond_person <- df[2, ]\nage_column <- df[, \"age\"]\n```\n:::\n\n\n\n## Using `subset()` Function\n\n- Extracting rows based on conditions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvery_old_people <- subset(df, age > 25)\nsummary(very_old_people$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  30.00   31.25   32.50   32.50   33.75   35.00 \n```\n\n\n:::\n\n```{.r .cell-code}\nmean(very_old_people$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32.5\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(very_old_people$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n:::\n\n\n\n## Explore Data Frames\n\n- Using `head()`, `tail()`, and `str()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age gender\n1   alice  25 female\n2     bob  30   male\n3 charlie  35   male\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age gender\n1   alice  25 female\n2     bob  30   male\n3 charlie  35   male\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ name  : chr  \"alice\" \"bob\" \"charlie\"\n $ age   : num  25 30 35\n $ gender: chr  \"female\" \"male\" \"male\"\n```\n\n\n:::\n:::\n\n\n\n## Modify Data Frames\n\n- Add and modify columns and rows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add columns\ndf$employed <- c(TRUE, TRUE, FALSE)\n# add rows\nnew_person <- data.frame(name = \"diana\", age = 28, gender = \"female\", employed = TRUE)\ndf <- rbind(df, new_person)\n# modify values\ndf[4, \"age\"] <- 26\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age gender employed\n1   alice  25 female     TRUE\n2     bob  30   male     TRUE\n3 charlie  35   male    FALSE\n4   diana  26 female     TRUE\n```\n\n\n:::\n:::\n\n\n\n## `rbind()` and `cbind()`\n\n- Adding rows and columns to data frames\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add rows with `rbind()`\nnew_person <- data.frame(name = \"eve\", age = 32, gender = \"female\", employed = TRUE)\ndf <- rbind(df, new_person)\n# add columns with `cbind()`\noccupation_vector <- c(\"engineer\", \"doctor\", \"artist\", \"teacher\", \"doctor\")\ndf <- cbind(df, occupation_vector)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name age gender employed occupation_vector\n1   alice  25 female     TRUE          engineer\n2     bob  30   male     TRUE            doctor\n3 charlie  35   male    FALSE            artist\n4   diana  26 female     TRUE           teacher\n5     eve  32 female     TRUE            doctor\n```\n\n\n:::\n:::\n\n\n\n## Data Structure View\n\n- Using `summary()`, `str()`, `head()`, and `tail()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n\n\n:::\n:::\n\n\n\n## Statistical Functions\n\n- `mean()`, `sd()`, `min()`, `max()`, and `table()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  seed for reproducibility\nset.seed(12345)\nvector <- rnorm(n = 40, mean = 0, sd = 1)\nmean(vector)  # calculates mean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2401853\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(vector)  # computes standard deviation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.038425\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(vector)  # finds minimum value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.817956\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(vector)  # finds maximum value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.196834\n```\n\n\n:::\n:::\n\n\n\n## Introduction to `ggplot2`\n\n- Visualizing data with `ggplot2`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  seed for reproducibility\nset.seed(12345)\n# ensure ggplot2 is installed and loaded\nif (!require(ggplot2)) install.packages(\"ggplot2\")\nlibrary(ggplot2)\n# simulate student data\nstudent_data <- data.frame(\n  name = c(\"alice\", \"bob\", \"charlie\", \"diana\", \"ethan\", \"fiona\", \"george\", \"hannah\"),\n  score = sample(80:100, 8, replace = TRUE),\n  stringsasfactors = FALSE\n)\nstudent_data$passed <- ifelse(student_data$score >= 90, \"passed\", \"failed\")\nstudent_data$passed <- factor(student_data$passed, levels = c(\"failed\", \"passed\"))\nstudent_data$study_hours <- sample(5:15, 8, replace = TRUE)\n```\n:::\n\n\n\n## ggplot2 Barplot:  score for each name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(student_data, aes(x = name, y = score)) +\n  geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-31-1.png){width=960}\n:::\n:::\n\n\n\n- enhanced bar plot with titles, axis labels, and modified colours\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(student_data, aes(x = name, y = score, fill = passed)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = c(\"TRUE\" = \"blue\", \"FALSE\" = \"red\")) +\n  labs(title = \"student scores\", x = \"student name\", y = \"score\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n\n\n## ggplot2 Scatterplot:  student scores against study hours\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(student_data, aes(x = study_hours, y = score, color = passed)) +\n  geom_point(size = 4) +\n  labs(title = \"student scores vs. study hours\", x = \"study hours\", y = \"score\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"failed\" = \"red\", \"passed\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n\n\n## ggplot2 Boxplot: scores by pass/fail status\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(student_data, aes(x = passed, y = score, fill = passed)) +\n  geom_boxplot() +\n  labs(title = \"score distribution by pass/fail status\", x = \"status\", y = \"score\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"failed\" = \"red\", \"passed\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n\n\n::: {.notes}\n# median (Q2/50th percentile): divides the dataset into two halves.\n# first quartile (Q1/25th percentile): lower edge indicating that 25% of the data falls below this value.\n# third quartile (Q3/75th percentile): upper edge of the box represents the third quartile, showing that 75% of the data is below this value.\n# interquartile range (IQR): height of the box represents the IQR: distance between the first and third quartiles (Q3 - Q1) / middle 50% of the data.\n# whiskers: The lines extending from the top and bottom of the box (the \"whiskers\") indicate the range of the data, typically to the smallest and largest values within 1.5 * IQR from the first and third quartiles, respectively. Points outside this range are often considered outliers and can be plotted individually.\n# outliers: points that lie beyond the whiskers\n:::\n\n## ggplot2 Histogram:  distribution of scores\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(student_data, aes(x = score, fill = passed)) +\n  geom_histogram(binwidth = 5, color = \"black\", alpha = 0.7) +\n  labs(title = \"histogram of scores\", x = \"score\", y = \"count\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"failed\" = \"red\", \"passed\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-35-1.png){width=960}\n:::\n:::\n\n\n\n## ggplot2 Lineplot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# prep data\nmonths <- factor(month.abb[1:8], levels = month.abb[1:8])\nstudy_hours <- c(0, 3, 15, 30, 35, 120, 18, 15)\nstudy_data <- data.frame(month = months, study_hours = study_hours)\n\n# line plot\nggplot(study_data, aes(x = month, y = study_hours, group = 1)) +\n  geom_line(linewidth = 1, color = \"blue\") +\n  geom_point(color = \"red\", size = 1) +\n  labs(title = \"monthly study hours\", x = \"month\", y = \"study hours\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-36-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## Base R Scatter Plot: scores vs. study hours\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# scatter plot\nplot(student_data$study_hours, student_data$score,\n     main = \"scatter plot of scores vs. study hours\",\n     xlab = \"study hours\", ylab = \"score\",\n     pch = 19, col = ifelse(student_data$passed == \"passed\", \"blue\", \"red\"))\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-37-1.png){width=960}\n:::\n:::\n\n\n\n## Base R Histogram\n\n- histogram to visualise distribution of student scores\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# histogram \nhist(student_data$score,\n     breaks = 5,\n     col = \"skyblue\",\n     main = \"histogram of student scores\",\n     xlab = \"scores\",\n     border = \"white\")\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-38-1.png){width=960}\n:::\n:::\n\n\n\n## Base R Boxplots: Distribution by Pass/Fail\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# boxplot\nboxplot(score ~ passed, data = student_data,\n        main = \"score distribution by pass/fail status\",\n        xlab = \"status\", ylab = \"scores\",\n        col = c(\"red\", \"blue\"))\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-39-1.png){width=960}\n:::\n:::\n\n\n::: {.notes}\n# median (Q2/50th percentile): divides the dataset into two halves.\n# first quartile (Q1/25th percentile): lower edge indicating that 25% of the data falls below this value.\n# third quartile (Q3/75th percentile): upper edge of the box represents the third quartile, showing that 75% of the data is below this value.\n# interquartile range (IQR): height of the box represents the IQR: distance between the first and third quartiles (Q3 - Q1) / middle 50% of the data.\n# whiskers: The lines extending from the top and bottom of the box (the \"whiskers\") indicate the range of the data, typically to the smallest and largest values within 1.5 * IQR from the first and third quartiles, respectively. Points outside this range are often considered outliers and can be plotted individually.\n# outliers: points that lie beyond the whiskers\n:::\n\n## Base R Barplot: Score Distributions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# prep data for the barplot\nscores_table <- table(student_data$score)\nbarplot(scores_table,\n        main = \"Barplot of Scores\",\n        xlab = \"Scores\",\n        ylab = \"Frequency\",\n        col = \"skyblue\",\n        border = \"white\")\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-40-1.png){width=960}\n:::\n:::\n\n\n\n## Base R Line Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert 'month' to a numeric scale for plotting positions\nmonths_num <- 1:length(study_data$month) # Simple numeric sequence\n\n# Plotting points with suppressed x-axis\nplot(months_num, study_data$study_hours, \n     type = \"p\", # Points\n     pch = 19,   # Type of point\n     col = \"red\", \n     xlab = \"Month\", \n     ylab = \"Study Hours\", \n     main = \"Monthly Study Hours\",\n     xaxt = \"n\") # Suppress the x-axis\n\n# add lines between points\nlines(months_num, study_data$study_hours, \n      col = \"blue\", \n      lwd = 1) # Line width\n\n# add custom month labels to the x-axis at appropriate positions\naxis(1, at = months_num, labels = study_data$month, las=2) # `las=2` makes labels perpendicular to axis\n```\n\n::: {.cell-output-display}\n![](01-slides-lab_files/figure-revealjs/unnamed-chunk-41-1.png){width=960}\n:::\n:::\n\n\n\n## What have your learned? \n\n\n\n1.  You have Base R and R-studio Downloaded on your machine\n2.  You are able able to use R for basic analysis and graphing\n3.  You will need to practice, and will have lots of opporunity.\n\n\n## Where to Get Help\n\n1. **Large Language Models (LLMs):** LLMs are trained on extensive datasets. They are extremely good coding tutors. Open AI's GPT-4 considerably outperforms GPT-3.5.  However GPT 3.5 should be good enough. Gemini has a two-month free trial. LLM's are rapidly evolving. However, presently, to use these tools, and to spot their errors, you will need to know how to code.  Which is fortunate because coding makes you smarter!\n\n**Note:** you will not be assessed for R-code. Help from LLM's for *coding* does not consitute a breach of academic integrity in this course. Your tests are in-class; no LLM's allowed.  For your final report, you will need to cite all sources, and how you used them, including LLMs. \n\n2. [Stack Overflow](https://stackoverflow.com/questions/tagged/r): an outstanding resource for most problems. Great community. \n\n3. [Cross-validated](https://stats.stackexchange.com/) the best place to go for stats advice. (LLM's are only safe for standard statistics. They do not perform well for causal inference.)\n\n4. **Developer Websites and GitHub Pages:** [Tidyverse](https://github.com/tidyverse)\n\n4.  Your tutors and course coordinator. We care. We’re here to help you!\n\n\n## References\n\n- Wickham, H., & Grolemund, G. (2016). *R for Data Science*. O'Reilly Media. [Available online](https://r4ds.had.co.nz\n\n\n- A helpful resource for learning R is Megan Hall's lecture available at: [https://meghan.rbind.io/talk/neair/](https://meghan.rbind.io/talk/neair/).\n\n- RStudio has compiled numerous accessible materials for learning R, which can be found here: [https://education.rstudio.com/learn/beginner/](https://education.rstudio.com/learn/beginner/).\n",
    "supporting": [
      "01-slides-lab_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}