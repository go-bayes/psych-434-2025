{
  "hash": "459d633fe51a4ce5b178185b2156f736",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Causal inference: a step by step guide\"\ndate: \"2025-MAY-06\"\nbibliography: /Users/joseph/GIT/templates/bib/references.bib\neditor_options: \n  chunk_output_type: console\nformat:\n  html:\n    warnings: FALSE\n    error: FALSE\n    messages: FALSE\n    code-overflow: scroll\n    highlight-style: Ayu\n    code-line-numbers: true\n    code-fold: true\n    code-tools:\n      source: true\n      toggle: false\nhtml-math-method: katex\nreference-location: margin\ncitation-location: margin\ncap-location: margin\ncode-block-border-left: true\n---\n\n\n\n\n::: {.callout-note}\n**Required**\n- grf package readings [https://grf-labs.github.io/grf/](https://grf-labs.github.io/grf/)\n- Do \"Homework\" form Lecture 8\n\n**Optional**\n- [@Bulbulia2024PracticalGuide] [link](https://osf.io/preprints/psyarxiv/uyg3d)\n- [@hoffman2023] [link](https://arxiv.org/pdf/2304.09460.pdf)\n- [@vanderweele2020] [link](https://www.dropbox.com/scl/fi/srpynr0dvjcndveplcydn/OutcomeWide_StatisticalScience.pdf?rlkey=h4fv32oyjegdfl3jq9u1fifc3&dl=0)\n:::\n\n::: {.callout-important}\n## Key concepts\n\nDoing a causal analysis\n\n:::\n\n::: {.callout-important}\n-  Download the R script\n-  Download the relevant libraries.\n-  Will go through this script step-by-step.\n:::\n\n\n\n\n# Part 1: Laboratory\n\n\n\n### Scripts for a full analysis\n\n::: {.callout-note-script-0}\n[Download full lab scripts 0](../laboratory/lab-10/00-setup-L10.R)\n:::\n\n\n::: {.callout-note-script-1}\n[Download full lab scripts 1](../laboratory/ ../laboratory/lab-10/01-init-L10.R)\n:::\n\n::: {.callout-note-script-2}\n[Download full lab scripts 2]( ../laboratory/lab-10/02-make-wide-L10.R)\n:::\n\n::: {.callout-note-script-3}\n[Download full lab scripts 3](../laboratory/lab-10/03-models-L10.R)\n:::\n\n\n## Script 0: Synthetic Data Fetch\n\n**Run in full. No need to change anything.**  \n\nThis script prepares your data. Run it once -- running it twice would be like turning the ignition off just to start your car again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for students: reproducibility is like following a recipe; each step ensures the same result\n# restart fresh session if needed\n\n# +--------------------------+\n# |       DO NOT ALTER       |\n# +--------------------------+\n\nrstudioapi::restartSession()\n\n# set seed for reproducibility\nset.seed(123)\n\n# essential library ---------------------------------------------------------\n# install and load 'margot' from GitHub if missing\nif (!require(margot, quietly = TRUE)) {\n  devtools::install_github(\"go-bayes/margot\")\n  library(margot)\n}\n\n\nif (packageVersion(\"margot\") < \"1.0.37\") {\n  stop(\"please install margot >= 1.0.37 for this workflow\\n\n       run: devtools::install_github(\\\"go-bayes/margot\\\")\n\")\n}\n\n# call library\nlibrary(\"margot\")\n\n\n\n# load packages ----------------------------------------------------------\n# install and load other packages from CRAN if missing\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n\nif (!requireNamespace(\"qs\", quietly = TRUE)) {\n  install.packages(\"qs\")\n}\nlibrary(qs)\n\nif (!requireNamespace(\"here\", quietly = TRUE)) {\n  install.packages(\"here\")\n}\nlibrary(here)\n\nif (!requireNamespace(\"cli\", quietly = TRUE)) {\n  install.packages(\"cli\")\n}\nlibrary(\"cli\")\n\n\n# create data directory if it doesn't exist -----------------------------\nif (!dir.exists(\"data\")) {\n  dir.create(\"data\")  # first time only: make a folder named 'data'\n}\n\n# define file paths ------------------------------------------------------\n# use here() to build paths relative to your project root\ndata_dir <- here::here(\"data\")\n\ncli::cli_h1(\"created data folder ✔\")\n\n\n# download synthetic data ------------------------------------------------\n# specify the url for the data file\nurl <- \"https://www.dropbox.com/scl/fi/ru0ecayju04ja8ky1mhel/df_nz_long.qs?rlkey=prpk9a5v4vcg1ilhkgf357dhd&dl=1\"\n\n# download to a temporary file for safety\ntmp_file <- tempfile(fileext = \".qs\")\ndownload.file(url, tmp_file, mode = \"wb\")\n\n# read the data into R using qread\ndf_nz_long <- qread(tmp_file)\n\n# inspect the data -------------------------------------------------------\n# view the first few rows to check it loaded correctly\nprint(head(df_nz_long))\n\n# list column names so you know what variables are available\nprint(colnames(df_nz_long))\n\n# save a copy of the data ------------------------------------------------\n# save the dataset to your data directory for future use\nhere_save_qs(df_nz_long, \"df_nz_long\", data_dir)\n\ncli::cli_h1(\"downloaded data to data folder for furture use ✔\")\n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n# +--------------------------+\n# |     END                  |\n# +--------------------------+\n```\n:::\n\n\n## Script 1: Initial Data Wrangling is HERE\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# script 1 workflow lecture 10\n# may 2025\n# questions: joseph.bulbulia@vuw.ac.nz\n\n\n# +--------------------------+\n# |       DO NOT ALTER       |\n# +--------------------------+\n\n# restart fresh session for a clean workspace\nrstudioapi::restartSession()\n\n# set seed for reproducibility\nset.seed(123)\n\n# essential library ---------------------------------------------------------\n# install and load 'margot' from GitHub if missing\nif (!require(margot, quietly = TRUE)) {\n  devtools::install_github(\"go-bayes/margot\")\n  library(margot)\n}\n\n\nif (packageVersion(\"margot\") < \"1.0.37\") {\n  stop(\"please install margot >= 1.0.37 for this workflow\\n\n       run: devtools::install_github(\\\"go-bayes/margot\\\")\n\")\n}\n\n# call library\nlibrary(\"margot\")\n\n# load packages -------------------------------------------------------------\n# pacman will install missing packages automatically\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,       # data wrangling + plotting\n  qs,              # fast data i/o\n  here,            # project-relative file paths\n  data.table,      # fast data manipulation\n  fastDummies,     # dummy variable creation\n  naniar,          # missing data handling\n  skimr,           # summary statistics\n  grf,             # machine learning forests\n  kableExtra,      # tables\n  ggplot2,         # graphs\n  doParallel,       # parallel processing\n  grf,             # causal forests\n  janitor,          # variables names\n  stringr,          # variable names\n  patchwork,        # graphs\n  table1,          # tables,\n  cli\n)\n\n\n# create directories --------------------------------------------------------\n# create data directory if it doesn't exist\nif (!dir.exists(\"data\")) {\n  dir.create(\"data\")  # first time only: make a folder named 'data'\n}\n\nif (!dir.exists(\"save_directory\")) {\n  dir.create(\"save_directory\")  # first time only: make a folder named 'data'\n}\n\n# set up data directory structure\ndata_dir    <- here::here(\"data\")\npush_mods <- here::here(\"save_directory\") \n\n\n# load data -----------------------------------------------------------------\ndf_nz_long <- margot::here_read_qs(\"df_nz_long\", data_dir)\n\n# initial data prep ---------------------------------------------------------\n# prepare intial data\n# define labels for rural classification\nrural_labels <- c(\n  \"High Urban Accessibility\", \n  \"Medium Urban Accessibility\",\n  \"Low Urban Accessibility\", \n  \"Remote\", \n  \"Very Remote\"\n)\n\ndat_prep <- df_nz_long |>\n  arrange(id, wave) |>\n  margot::remove_numeric_attributes() |>\n  mutate(\n    # cap extreme values\n    alcohol_intensity = pmin(alcohol_intensity, 15),\n    # flag heavy drinkers: freq ≥3 → 1, ≤2 → 0, else NA\n    heavy_drinker = case_when(\n      alcohol_frequency >= 3 ~ 1,\n      alcohol_frequency <= 2 ~ 0,\n      TRUE                  ~ NA_real_\n    ),\n    # map freq categories to weekly counts\n    alcohol_frequency_weekly = recode(\n      alcohol_frequency,\n      `0` = 0, `1` = 0.25,\n      `2` = 1, `3` = 2.5,\n      `4` = 4.5,\n      .default = NA_real_\n    ),\n    # relabel rural factor\n    rural_gch_2018_l = factor(\n      rural_gch_2018_l,\n      levels = 1:5,\n      labels = rural_labels,\n      ordered = TRUE\n    )\n  ) |>\n  droplevels()\n\n\n\n# view variable names -----------------------------------------------------\nprint(colnames(df_nz_long)) \n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# | OPTIONALLY MODIFY SECTION|\n# +--------------------------+\n\n# define study variables ----------------------------------------------------\n# ** key decision 1: define your three study waves **\n# **  define your study waves **\nbaseline_wave      <- \"2018\"        # baseline measurement\nexposure_waves     <- c(\"2019\")     # when exposure is measured\noutcome_wave       <- \"2020\"        # when outcomes are measured\nall_waves          <- c(baseline_wave, exposure_waves, outcome_wave)\n\ncli::cli_h1(\"set waves for three-wave study ✔\")\n\n\n# +--------------------------+\n# |END OPTIONALLY MODIFY SEC.|\n# +--------------------------+\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n\n\n# define exposure variable ----------------------------------------------------\n# ** key decision 2: define your exposure variable **\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\nname_exposure <- \"extraversion\"\n\n# exposure variable labels\nvar_labels_exposure <- list(\n  \"extraversion\" = \"Extraversion\",\n  \"extraversion_binary\" = \"Extraversion (binary)\"\n)\n\ncli::cli_h1(\"set variable name for exposure ✔\")\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n\n\n\n\n\n\n# define outcome variables -------------------------------------------\n# ** key decision 3: define your outcome variable **\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n# ** key decision 3: define outcome variables **\n# here, we are focussing on a subset of wellbeing outcomes\n# chose outcomes relevant to * your * study. Might be all/some/none/exactly \n# these:\noutcome_vars <- c(\n  # health outcomes\n  # \"alcohol_frequency_weekly\", \"alcohol_intensity\",\n  # \"hlth_bmi\", \n  \"log_hours_exercise\", \n  # \"hlth_sleep_hours\", \n  # \"short_form_health\",\n  \n  # psychological outcomes\n  # \"hlth_fatigue\", \n  \"kessler_latent_anxiety\", \n  \"kessler_latent_depression\", \n  \"rumination\",\n  \n  # well-being outcomes\n  # \"bodysat\", \n  #\"forgiveness\", \"gratitude\", \n  \"lifesat\", \"meaning_purpose\", \"meaning_sense\", \n  # \"perfectionism\", \n  \"pwi\", \n  #\"self_control\", \n  \"self_esteem\", \n  #\"sexual_satisfaction\",\n  \n  # social outcomes\n  \"belong\", \"neighbourhood_community\", \"support\"\n)\n\ncli::cli_h1(\"set variable name for outcomes ✔\")\n\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# | OPTIONALLY MODIFY SECTION|\n# +--------------------------+\n# define baseline variables -----------------------------------------------\n# key decision 4 **  define baseline covariates **\n# these are demographics, traits, etc. measured at baseline, that are common\n# causes of the exposure and outcome.  \n# note we will automatically include baseline measures of the exposure and outcome\n# later in the workflow.\n\nbaseline_vars <- c(\n  # demographics\n  \"age\", \"born_nz_binary\", \"education_level_coarsen\",\n  \"employed_binary\", \"eth_cat\", \"male_binary\",\n  \"not_heterosexual_binary\", \"parent_binary\", \"partner_binary\",\n  \"rural_gch_2018_l\", \"sample_frame_opt_in_binary\",\n  \n  # personality traits (excluding exposure)\n  \"agreeableness\", \"conscientiousness\", \"neuroticism\", \"openness\",\n  \n  # health and lifestyle\n  \"alcohol_frequency\", \"alcohol_intensity\", \"hlth_disability_binary\",\n  \"log_hours_children\", \"log_hours_commute\", \"log_hours_exercise\",\n  \"log_hours_housework\", \"log_household_inc\",\n  \"short_form_health\", \"smoker_binary\",\n  \n  # social and psychological\n  \"belong\", \"nz_dep2018\", \"nzsei_13_l\",\n  \"political_conservative\", \"religion_identification_level\"\n)\n\n\ncli::cli_h1(\"set baseline covariate names  ✔\")\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n\n\n\n\n\n# +--------------------------+\n# |       DO NOT ALTER       |\n# +--------------------------+\n\n# after selecting your exposure/ baseline / outcome variables do not modify this\n# code\n\n# make binary variable (UNLESS YOUR EXPOSURE IS A BINARY VARIABLE)\nexposure_var_binary = paste0(name_exposure, \"_binary\")\n\n# make exposure variable list (we will keep both the continuous and binary variable)\nexposure_var  <- c(name_exposure, paste0(name_exposure, \"_binary\"))\n\n# sort for easier reference\nbaseline_vars <- sort(baseline_vars)\noutcome_vars <- sort(outcome_vars)\n\n# save key variables --------------------------------------------------------\nmargot::here_save(name_exposure, \"name_exposure\")\nmargot::here_save(var_labels_exposure,\"var_labels_exposure\")\nmargot::here_save(baseline_vars,\"baseline_vars\")\nmargot::here_save(exposure_var, \"exposure_var\")\nmargot::here_save(exposure_var_binary, \"exposure_var_binary\")\nmargot::here_save(outcome_vars, \"outcome_vars\")\nmargot::here_save(baseline_wave, \"baseline_wave\")\nmargot::here_save(exposure_waves, \"exposure_waves\")\nmargot::here_save(outcome_wave, \"outcome_wave\")\nmargot::here_save(all_waves,\"all_waves\")\n\ncli::cli_h1(\"saved names and labels to be used for manuscript  ✔\")\n\n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# | OPTIONALLY MODIFY SECTION|\n# +--------------------------+\n\n# select eligible participants ----------------------------------------------\n# only include participants who have exposure data at baseline\n\n# You might require tighter conditions \n# for example, if you are interested in the effects of hours of childcare, \n# you might want to select only those who were parents at baseline. \n# talk to me if you think you might night tighter eligibility criteria.\n\nids_baseline <- dat_prep |> \n  # allow missing exposure at baseline\n  # this would give us greater confidence that we generalise to the target population\n  # filter(wave == baseline_wave) |> \n  # option: do not allow missing exposure at baseline\n  # this gives us greater confidence that we recover a incident effect\n  filter(wave == baseline_wave, !is.na(!!sym(name_exposure))) |> \n  pull(id)\n\n\ncli::cli_h1(\"set eligibility criteria for baseline cohort ✔\")\n\n\n# filter data to include only eligible participants and relevant waves\ndat_long_1 <- dat_prep |> \n  filter(id %in% ids_baseline, wave %in% all_waves) |> \n  droplevels()\n\n# +--------------------------+\n# |END OPTIONALLY MODIFY SEC.|\n# +--------------------------+\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n# plot distribution to help with cutpoint decision\ndat_long_exposure <- dat_long_1 |> filter(wave %in% exposure_waves)\n\n# make graph \n# define cutpoints\ncut_points = c(1, 4)\n\n# use later in positivity graph\nlower_cut <- cut_points[[1]]\nupper_cut <- cut_points[[2]]\nthreshold <- '>' # if upper\n\n# save for manuscript\nhere_save(lower_cut, \"lower_cut\")\nhere_save(upper_cut, \"upper_cut\")\nhere_save(threshold, \"threshold\")\n\ncli::cli_h1(\"set thresholds for binary variable (if variable is continuous) ✔\")\n\n\n# make graph\ngraph_cut <- margot::margot_plot_categorical(\n  dat_long_exposure,\n  col_name         = name_exposure,\n  sd_multipliers = c(-1, 1), # select to suit\n  # either use n_divisions for equal-sized groups:\n  # n_divisions      = 2,\n  # or use custom_breaks for specific values:\n  custom_breaks    = cut_points,  # ** adjust as needed **\n  # could be \"lower\", no difference in this case, as no one == 4\n  cutpoint_inclusive = \"upper\",\n  show_mean        = TRUE,\n  show_median      = FALSE,\n  show_sd          = TRUE\n)\nprint(graph_cut)\n\n# save your graph\nmargot::here_save(graph_cut, \"graph_cut\", push_mods)\n\n# create binary exposure variable based on chosen cutpoint\ndat_long_2 <- margot::create_ordered_variable(\n  dat_long_1,\n  var_name           = name_exposure,\n  custom_breaks      = cut_points,  # ** -- adjust based on your decision above -- **\n  cutpoint_inclusive = \"upper\"\n)\n\n\ncli::cli_h1(\"created binary variable (if variable is continuous) ✔\")\n\n\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n\n\n\n\n# +--------------------------+\n# |       DO NOT ALTER       |\n# +--------------------------+\n\n# process binary variables and log-transform --------------------------------\n# convert binary factors to 0/1 format\ndat_long_3 <- margot::margot_process_binary_vars(dat_long_2)\n\n# log-transform hours and income variables: tables for analysis (only logged versions of vars)\ndat_long_final <- margot::margot_log_transform_vars(\n  dat_long_3,\n  vars            = c(starts_with(\"hours_\"), \"household_inc\"),\n  prefix          = \"log_\",\n  keep_original   = FALSE,\n  exceptions = exposure_var # omit original variables\n) |> \n  # select only variables needed for analysis\n  select(all_of(c(baseline_vars, exposure_var, outcome_vars, \"id\", \"wave\", \"year_measured\", \"sample_weights\"))) |> \n  droplevels()\n\n\n# check missing data --------------------------------------------------------\n# this is crucial to understand potential biases\nmissing_summary <- naniar::miss_var_summary(dat_long_final)\nprint(missing_summary)\nmargot::here_save(missing_summary, \"missing_summary\", push_mods)\n\n# visualise missing data pattern\n# ** -- takes a while to render ** \nvis_miss <- naniar::vis_miss(dat_long_final, warn_large_data = FALSE)\nprint(vis_miss)\nmargot::here_save(vis_miss, \"vis_miss\", push_mods)\n\n# calculate percentage of missing data at baseline\ndat_baseline_pct <- dat_long_final |> filter(wave == baseline_wave)\npercent_missing_baseline <- naniar::pct_miss(dat_baseline_pct)\nmargot::here_save(percent_missing_baseline, \"percent_missing_baseline\", push_mods)\n\n# save prepared dataset for next stage --------------------------------------\nmargot::here_save(dat_long_final, \"dat_long_final\", push_mods)\n\n\ncli::cli_h1(\"made and saved final long data set for further processign in script 02 ✔\")\n\n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n# check positivity --------------------------------------------------------\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n\n\n# check\nthreshold # defined above\nupper_cut # defined above\n\nname_exposure\n# create transition matrices to check positivity ----------------------------\n# this helps assess whether there are sufficient observations in all exposure states\ndt_positivity <- dat_long_final |>\n  filter(wave %in% c(baseline_wave, exposure_waves)) |>\n  select(!!sym(name_exposure), id, wave) |>\n  mutate(exposure = round(as.numeric(!!sym(name_exposure)), 0)) |>\n  # create binary exposure based on cutpoint\n  mutate(exposure_binary = ifelse(exposure > upper_cut, 1, 0)) |> # check\n  ## *-- modify this --* \n  mutate(wave = as.numeric(wave) -1 )\n\n# create transition tables\ntransition_tables <- margot::margot_transition_table(\n  dt_positivity,\n  state_var = \"exposure\",\n  id_var = \"id\",\n  waves = c(0, 1),\n  wave_var = \"wave\",\n  table_name = \"transition_table\"\n)\nprint(transition_tables$tables[[1]])\nmargot::here_save(transition_tables, \"transition_tables\", push_mods)\n\n# create binary transition tables\ntransition_tables_binary <- margot::margot_transition_table(\n  dt_positivity,\n  state_var = \"exposure_binary\",\n  id_var = \"id\",\n  waves = c(0, 1),\n  wave_var = \"wave\",\n  table_name = \"transition_table_binary\"\n)\nprint(transition_tables_binary$tables[[1]])\nmargot::here_save(transition_tables_binary, \"transition_tables_binary\", push_mods)\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n# create tables -----------------------------------------------------------\n# baseline variable labels\nvar_labels_baseline <- list(\n  # demographics\n  \"age\" = \"Age\",\n  \"born_nz_binary\" = \"Born in NZ\",\n  \"education_level_coarsen\" = \"Education Level\",\n  \"employed_binary\" = \"Employed\",\n  \"eth_cat\" = \"Ethnicity\",\n  \"male_binary\" = \"Male\",\n  \"not_heterosexual_binary\" = \"Non-heterosexual\",\n  \"parent_binary\" = \"Parent\",\n  \"partner_binary\" = \"Has Partner\",\n  \"rural_gch_2018_l\" = \"Rural Classification\",\n  \"sample_frame_opt_in_binary\" = \"Sample Frame Opt-In\",\n  \n  # economic & social status\n  \"household_inc\" = \"Household Income\",\n  \"log_household_inc\" = \"Log Household Income\",\n  \"nz_dep2018\" = \"NZ Deprivation Index\",\n  \"nzsei_13_l\" = \"Occupational Prestige Index\",\n  \"household_inc\" = \"Household Income\",\n\n  \n  # personality traits\n  \"agreeableness\" = \"Agreeableness\",\n  \"conscientiousness\" = \"Conscientiousness\",\n  \"neuroticism\" = \"Neuroticism\",\n  \"openness\" = \"Openness\",\n  \n  # beliefs & attitudes\n  \"political_conservative\" = \"Political Conservatism\",\n  \"religion_identification_level\" = \"Religious Identification\",\n  \n  # health behaviors\n  \"alcohol_frequency\" = \"Alcohol Frequency\",\n  \"alcohol_intensity\" = \"Alcohol Intensity\",\n  \"hlth_disability_binary\" = \"Disability Status\",\n  \"smoker_binary\" = \"Smoker\",\n  \"hours_exercise\" = \"Hours of Exercise\",\n  \n  \n  # time use\n  \"hours_children\" = \"Hours with Children\",\n  \"hours_commute\" = \"Hours Commuting\",\n  \"hours_exercise\" = \"Hours Exercising\",\n  \"hours_housework\" = \"Hours on Housework\",\n  \"log_hours_children\" = \"Log Hours with Children\",\n  \"log_hours_commute\" = \"Log Hours Commuting\",\n  \"log_hours_exercise\" = \"Log Hours Exercising\",\n  \"log_hours_housework\" = \"Log Hours on Housework\"\n)\nhere_save(var_labels_baseline, \"var_labels_baseline\")\n\n# outcome variable labels, organized by domain\n# reivew your outcomes make sure they appear on the list below\n# comment out what you do not need\noutcome_vars\n\n# get names\nvar_labels_outcomes <- list(\n  # \"alcohol_frequency_weekly\" = \"Alcohol Frequency (weekly)\",\n  # \"alcohol_intensity\" = \"Alcohol Intensity\",\n  # \"hlth_bmi\" = \"Body Mass Index\",\n  # \"hlth_sleep_hours\" = \"Sleep\",\n  \"log_hours_exercise\" = \"Hours of Exercise (log)\",\n # \"short_form_health\" = \"Short Form Health\",\n  \"hlth_fatigue\" = \"Fatigue\",\n  \"kessler_latent_anxiety\" = \"Anxiety\",\n  \"kessler_latent_depression\" = \"Depression\",\n # \"rumination\" = \"Rumination\",\n  \"bodysat\" = \"Body Satisfaction\",\n # \"forgiveness\" = \"Forgiveness\",\n # \"perfectionism\" = \"Perfectionism\",\n # \"self_control\" = \"Self Control\",\n  \"self_esteem\" = \"Self Esteem\",\n  \"sexual_satisfaction\" = \"Sexual Satisfaction\",\n # \"gratitude\" = \"Gratitude\",\n  \"lifesat\" = \"Life Satisfaction\",\n  \"meaning_purpose\" = \"Meaning: Purpose\",\n  \"meaning_sense\" = \"Meaning: Sense\",\n  \"pwi = Personal Well-being Index\",\n  \"belong\" = \"Social Belonging\",\n  \"neighbourhood_community\" = \"Neighbourhood Community\",\n  \"support\" = \"Social Support\"\n)\n\n# save for manuscript\nhere_save(var_labels_outcomes, \"var_labels_outcomes\")\n\n\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n\n# +--------------------------+\n# |       DO NOT ALTER       |\n# +--------------------------+\n# tables ------------------------------------------------------------------\n# create baseline characteristics table\ndat_baseline = dat_long_final |>\n  filter(wave %in% c(baseline_wave)) |>\n  mutate(\n    male_binary = factor(male_binary),\n    parent_binary = factor(parent_binary),\n    smoker_binary = factor(smoker_binary),\n    born_nz_binary = factor(born_nz_binary),\n    employed_binary = factor(employed_binary),\n    not_heterosexual_binary = factor(not_heterosexual_binary),\n    sample_frame_opt_in_binary = factor(sample_frame_opt_in_binary)\n  )\n\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n\n# save sample weights from baseline wave\n# save sample weights\nt0_sample_weights <- dat_baseline$sample_weights\nhere_save(t0_sample_weights, \"t0_sample_weights\")\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n\n# make baseline table -----------------------------------------------------\n\nbaseline_table <- margot::margot_make_tables(\n  data = dat_baseline,\n  vars = baseline_vars,\n  by = \"wave\",\n  labels = var_labels_baseline,\n  table1_opts = list(overall = FALSE, transpose = FALSE),\n  format = \"markdown\"\n)\nprint(baseline_table)\nmargot::here_save(baseline_table, \"baseline_table\", push_mods)\n\n# create exposure table by wave\nexposure_table <- margot::margot_make_tables(\n  data = dat_long_final |> filter(wave %in% c(baseline_wave, exposure_waves)),\n  vars = exposure_var,\n  by = \"wave\",\n  labels = var_labels_exposure,\n  factor_vars = exposure_var_binary,\n  table1_opts = list(overall = FALSE, transpose = FALSE),\n  format = \"markdown\"\n)\nprint(exposure_table)\nmargot::here_save(exposure_table, \"exposure_table\", push_mods)\n\n# create outcomes table by wave\noutcomes_table <- margot::margot_make_tables(\n  data = dat_long_final |> filter(wave %in% c(baseline_wave, outcome_wave)),\n  vars = outcome_vars,\n  by = \"wave\",\n  labels = var_labels_outcomes,\n  format = \"markdown\"\n)\nprint(outcomes_table)\nmargot::here_save(outcomes_table, \"outcomes_table\", push_mods)\n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n# +--------------------------+\n# |     END                  |\n# +--------------------------+\n\n\n# note: completed data preparation step -------------------------------------\n# you're now ready for the next steps:\n# 1. creating wide-format dataset for analysis \n# 2. applying causal inference methods\n# 3. conducting sensitivity analyses\n\n# key decisions summary:\n# exposure variable: extraversion\n# study waves: baseline (2018), exposure (2019), outcome (2020)\n# baseline covariates: demographics, traits, health measures (excluding exposure)\n# outcomes: health, psychological, wellbeing, and social variables\n# binary cutpoint for exposure: here, 4 on the extraversion scale\n# label names for tables\n\n\n\n\n# THIS IS FOR INTEREST ONLY ----------------------------------------------------\n# uncomment to view random chang in individuals\n# visualise individual changes in exposure over time ------------------------\n# useful for understanding exposure dynamics\n# individual_plot <- margot_plot_individual_responses(\n#   dat_long_1,\n#   y_vars = name_exposure,\n#   id_col = \"id\",\n#   waves = c(2018:2019),\n#   random_draws = 56,  # number of randomly selected individuals to show\n#   theme = theme_classic(),\n#   scale_range = c(1, 7),  # range of the exposure variable\n#   full_response_scale = TRUE,\n#   seed = 123\n# )\n# print(individual_plot)\n```\n:::\n\n\n\n## Script 2: Make Wide Data Format With Censoring Weights is HERE\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# script 2: causal workflow for estimating average treatment effects using margot\n# may 2025\n# questions: joseph.bulbulia@vuw.ac.nz\n\n# +--------------------------+\n# |       DO NOT ALTER       |\n# +--------------------------+\n\n# restart fresh session for a clean workspace\nrstudioapi::restartSession()\n\n# set seed for reproducibility\nset.seed(123)\n\n# libraries ---------------------------------------------------------------\n# essential library ---------------------------------------------------------\nif (!require(margot, quietly = TRUE)) {\n  devtools::install_github(\"go-bayes/margot\")\n}\n\n\nif (packageVersion(\"margot\") < \"1.0.37\") {\n  stop(\"please install margot >= 1.0.37 for this workflow\\n\n       run: devtools::install_github(\\\"go-bayes/margot\\\")\n\")\n}\n\nlibrary(margot)\n\n# load packages -------------------------------------------------------------\n# pacman will install missing packages automatically\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,       # data wrangling + plotting\n  qs,              # fast data i/o\n  here,            # project-relative file paths\n  data.table,      # fast data manipulation\n  fastDummies,     # dummy variable creation\n  naniar,          # missing data handling\n  skimr,           # summary statistics\n  grf,             # machine learning forests\n  kableExtra,      # tables\n  ggplot2,         # graphs\n  doParallel,      # parallel processing\n  grf,             # causal forests\n  janitor,         # variables names\n  stringr,         # variable names\n  patchwork,       # graphs\n  table1,           # tables\n  cli\n)\n\n# save paths -------------------------------------------------------------------\npush_mods <- here::here(\"save_directory\") \n\n# read data\ndat_long_final <- margot::here_read(\"dat_long_final\")\n\n# read baseline sample weights\nt0_sample_weights <- margot::here_read(\"t0_sample_weights\")\n\n# read exposure\nname_exposure <- margot::here_read(\"name_exposure\")\nname_exposure_binary = paste0(name_exposure, \"_binary\")\nname_exposure_continuous = name_exposure\n\n# read variables\nbaseline_vars <- margot::here_read(\"baseline_vars\")\nexposure_var <- margot::here_read(\"exposure_var\")\noutcome_vars <- margot::here_read(\"outcome_vars\")\nbaseline_wave <- margot::here_read(\"baseline_wave\")\nexposure_waves <- margot::here_read(\"exposure_waves\")\noutcome_wave <- margot::here_read(\"outcome_wave\")\n\n# define continuous columns to keep\ncontinuous_columns_keep <- c(\"t0_sample_weights\")\n\n# define ordinal columns that we will expand into binary variables\nordinal_columns <- c(\"t0_education_level_coarsen\",\n                     \"t0_eth_cat\",\n                     \"t0_rural_gch_2018_l\")\n\n# check is this the exposure variable that you want? \nname_exposure_binary\nname_exposure_continuous\n\n# define wide variable names\nt0_name_exposure_binary <- paste0(\"t0_\", name_exposure_binary)\nt0_name_exposure_binary\n\n# make exposure names (continuous not genreally used)\nt1_name_exposure_binary <- paste0(\"t1_\", name_exposure_binary)\nt1_name_exposure_binary\n\n# treatments (continuous verion)\nt0_name_exposure <- paste0(\"t0_\", name_exposure_continuous)\nt1_name_exposure <- paste0(\"t1_\", name_exposure_continuous)\nt0_name_exposure_continuous <- paste0(\"t0_\", name_exposure)\nt1_name_exposure_continuous <- paste0(\"t1_\", name_exposure)\n\n# raw outcomes\n# read health outcomes\noutcome_vars <- here_read(\"outcome_vars\")\nt2_outcome_z <- paste0(\"t2_\", outcome_vars, \"_z\")\n\n# view\nt2_outcome_z\n\n# check\nstr(dat_long_final)\n\n# check\nnaniar::gg_miss_var(dat_long_final)\n\n# impute data --------------------------------------------------------------\n# ordinal use\nordinal_columns <- c(\n  \"t0_education_level_coarsen\",\n  \"t0_eth_cat\",\n  \"t0_rural_gch_2018_l\",\n  \"t0_gen_cohort\"\n)\n\n# define cols we will not standardise\ncontinuous_columns_keep <- c(\"t0_sample_weights\")\n\n# remove sample weights\ndat_long_final_2 <- dat_long_final |> select(-sample_weights)\n\n# prepare data for analysis ----------------------\ndat_long_final_2 <- margot::remove_numeric_attributes(dat_long_final_2)\n# wide data\ndf_wide <- margot_wide_machine(\n  dat_long_final,\n  id = \"id\",\n  wave = \"wave\",\n  baseline_vars,\n  exposure_var = exposure_var,\n  outcome_vars,\n  confounder_vars = NULL,\n  imputation_method = \"none\",\n  include_exposure_var_baseline = TRUE,\n  include_outcome_vars_baseline = TRUE,\n  extend_baseline = FALSE,\n  include_na_indicators = FALSE\n)\n\n# check\ncolnames(df_wide)\n\n# return sample weights\ndf_wide$t0_sample_weights <-  t0_sample_weights\n\n# save\nmargot::here_save(df_wide, \"df_wide\")\n\n#df_wide <- margot::here_read(\"df_wide\")\nnaniar::vis_miss(df_wide, warn_large_data = FALSE)\n\n# view\nglimpse(df_wide)\n\n\n# order data with missingness assigned to work with grf and lmtp\n# if any outcome is censored all are censored\n# create version for model reports\n\n# check\ncolnames(df_wide)\n\n\n# made data wide in correct format\n# ** ignore warning *** \ndf_wide_encoded  <- margot::margot_process_longitudinal_data_wider(\n  df_wide,\n  ordinal_columns = ordinal_columns,\n  continuous_columns_keep = continuous_columns_keep,\n  not_lost_in_following_wave = \"not_lost_following_wave\",\n  lost_in_following_wave = \"lost_following_wave\",\n  remove_selected_columns = TRUE,\n  exposure_var = exposure_var,\n  scale_continuous = TRUE,\n  censored_if_any_lost = FALSE\n)\n\nmargot_process_longitudinal_data_wider()\n\n# check\ncolnames(df_wide_encoded)\n\n# check\ntable(df_wide_encoded$t0_not_lost_following_wave)\n\n# make the binary variable numeric\ndf_wide_encoded[[t0_name_exposure_binary]] <-\n  as.numeric(df_wide_encoded[[t0_name_exposure_binary]]) - 1\ndf_wide_encoded[[t1_name_exposure_binary]] <-\n  as.numeric(df_wide_encoded[[t1_name_exposure_binary]]) - 1\n\n# view\ndf_wide_encoded[[t0_name_exposure_binary]]\ndf_wide_encoded[[t1_name_exposure_binary]]\n\n# 1. ensure both binaries only take values 0 or 1 (ignore NA)\nstopifnot(all(df_wide_encoded[[t0_name_exposure_binary]][!is.na(df_wide_encoded[[t0_name_exposure_binary]])] %in% 0:1),\n          all(df_wide_encoded[[t1_name_exposure_binary]][!is.na(df_wide_encoded[[t1_name_exposure_binary]])] %in% 0:1))\n\n# 2. ensure NA‐patterns match between t1_exposure and t0_lost flag\n# count n-as in t1 exposure\nn_na_t1 <- sum(is.na(df_wide_encoded[[t1_name_exposure_binary]]))\n\n# count how many were lost at t0\nn_lost_t0 <- sum(df_wide_encoded$t0_lost_following_wave == 1, na.rm = TRUE)\n\n# print them for inspection\nmessage(\"NAs in \", t1_name_exposure_binary, \": \", n_na_t1)\nmessage(\"t0_lost_following_wave == 1: \", n_lost_t0)\n\n# stop if they don’t match\nstopifnot(n_na_t1 == n_lost_t0)\n\n# 3. ensure if t1 is non‐NA then subject was not lost at t0\nstopifnot(all(is.na(df_wide_encoded[[t1_name_exposure_binary]]) |\n                df_wide_encoded[[\"t0_not_lost_following_wave\"]] == 1))\n\n# view\nglimpse(df_wide_encoded)\n\n#naniar::vis_miss(df_wide_encoded, warn_large_data = FALSE)\nnaniar::gg_miss_var(df_wide_encoded)\n\n\n#save data\nhere_save(df_wide_encoded, \"df_wide_encoded\")\n\n# new weights approach ---------------------------------------------------------\n\n\n# panel attrition workflow using grf (two-stage IPCW + design weights)\n# -----------------------------------------------------------------------------\n# builds weights in two stages:\n#   w0 : baseline -> t1  (baseline covariates)\n#   w1 : t1 survivors -> t2  (baseline + time-1 exposure)\n# final weight = t0_sample_weights × w0 × w1, then trimmed & normalised.\n# -----------------------------------------------------------------------------\n\n# ── 0 setup ───────────────────────────────────────────────────────────────────\n\nlibrary(tidyverse)        # wrangling\nlibrary(glue)             # strings\nlibrary(grf)              # forests\nlibrary(cli)              # progress\n\nset.seed(123)\n\n# -----------------------------------------------------------------------------\n# 1 import full, unfiltered baseline file\n# -----------------------------------------------------------------------------\n\ndf <- margot::here_read(\"df_wide_encoded\")\ncli::cli_alert_info(glue(\"{nrow(df)} rows × {ncol(df)} columns loaded\"))\n\n# -----------------------------------------------------------------------------\n# 2 stage‑0 censoring: dropout between t0 → t1\n# -----------------------------------------------------------------------------\n\nbaseline_covars <- df %>%\n  select(starts_with(\"t0_\"), -ends_with(\"_lost\"), -ends_with(\"lost_following_wave\"), -ends_with(\"_weights\")) %>%\n  colnames() %>% sort()\n\nX0 <- as.matrix(df[, baseline_covars])\nD0 <- factor(df$t0_lost_following_wave, levels = c(0, 1))   # 0 = stayed, 1 = lost\n\ncli::cli_h1(\"stage 0: probability forest for baseline dropout …\")\n\npf0 <- probability_forest(X0, D0)\nP0  <- predict(pf0, X0)$pred[, 2]               # P(dropout by t1)\nw0  <- ifelse(D0 == 1, 0, 1 / (1 - P0))         # IPCW for stage 0\ndf$w0 <- w0\n\n# -----------------------------------------------------------------------------\n# 3 stage‑1 censoring: dropout between t1 → t2 (baseline + exposure)\n# -----------------------------------------------------------------------------\n\nexposure_var <- \"t1_extraversion_binary\"       # ← edit if needed\n\ndf1 <- df %>% filter(t0_lost_following_wave == 0)\n\n# remove rows with missing exposure for stage‑1 model\ncen1_data <- df1 %>% filter(!is.na(.data[[exposure_var]]))\n\nX1 <- as.matrix(cbind(\n  cen1_data[, baseline_covars],\n  cen1_data[[exposure_var]]\n))\ncolnames(X1)[ncol(X1)] <- exposure_var\n\nD1 <- factor(cen1_data$t1_lost_following_wave, levels = c(0, 1))\n\ncli::cli_h1(\"stage 1: probability forest for second‑wave dropout …\")\n\npf1 <- probability_forest(X1, D1)               # 1 = lost before t2\nP1  <- predict(pf1, X1)$pred[, 2]\nw1  <- ifelse(D1 == 1, 0, 1 / (1 - P1))\n\n# map w1 back to df1 (rows with NA exposure get weight 0)\ndf1$w1 <- 0\ndf1$w1[match(cen1_data$id, df1$id)] <- w1\n\n# -----------------------------------------------------------------------------\n# 4 combine design × IPCW weights\n# -----------------------------------------------------------------------------\n\n# bring forward w0 for the matching rows (safe join)\nw0_vec <- df$w0[match(df1$id, df$id)]\n\n# combined weight before trim / normalise\nraw_w <- df1$t0_sample_weights * w0_vec * df1$w1\n\ndf1$raw_weight <- raw_w\n\n# trim + normalise (exclude NA & zeros)\npos <- raw_w[!is.na(raw_w) & raw_w > 0]\n\nlb  <- quantile(pos, 0.00, na.rm = TRUE)\nub  <- quantile(pos, 0.99, na.rm = TRUE)\n\ntrimmed <- pmin(pmax(raw_w, lb), ub)\nnormalised <- trimmed / mean(trimmed, na.rm = TRUE)\n\ndf1$combo_weights <- normalised <- trimmed / mean(trimmed)\n\ndf1$combo_weights <- normalised\n\nhist(df1$combo_weights[df1$t1_lost_following_wave == 0],\n     main = \"combined weights (observed)\", xlab = \"weight\")\n\n# -----------------------------------------------------------------------------\n# 5 analysis set: observed through t2 (not censored at either stage)\n# -----------------------------------------------------------------------------\n\ndf_analysis <- df1 %>%\n  filter(t1_lost_following_wave == 0) %>%\n  droplevels()\n\nmargot::here_save(df_analysis, \"df_analysis_weighted_two_stage\")\n\ncli::cli_alert_success(glue(\"analysis sample: {nrow(df_analysis)} obs\"))\n\n# TEST DO NOT UNCOMMENT\n# -----------------------------------------------------------------------------\n# 6 causal forest (edit outcome var if needed)\n# -----------------------------------------------------------------------------\n# \n# outcome_var <- \"t2_kessler_latent_depression_z\"   # ← edit\n# \n# Y <- df_analysis[[outcome_var]]\n# W <- df_analysis[[exposure_var]]\n# X <- as.matrix(df_analysis[, baseline_covars])\n# \n# cf <- causal_forest(\n#   X, Y, W,\n#   sample.weights = df_analysis$combo_weights,\n#   num.trees      = 2000\n# )\n# \n# print(average_treatment_effect(cf))\n# margot::here_save(cf,          \"cf_ipcw_two_stage\")\n# -----------------------------------------------------------------------------\n# 7 save objects\n# -----------------------------------------------------------------------------\n\n\ncli::cli_h1(\"two-stage IPCW workflow complete ✔\")\n\n\n# # maintain workflow \nE <- baseline_covars\nhere_save(E, \"E\")\nlength(E)\ncolnames(df_analysis)\n\n\ncli::cli_h1(\"naming convention matcheds `grf` ✔\")\n\n\n# arrange\ndf_grf <- df_analysis |>\n  relocate(ends_with(\"_weights\"), .before = starts_with(\"t0_\")) |>\n  relocate(ends_with(\"_weight\"), .before = ends_with(\"_weights\")) |>\n  relocate(starts_with(\"t0_\"), .before = starts_with(\"t1_\")) |>\n  relocate(starts_with(\"t1_\"), .before = starts_with(\"t2_\")) |>\n  relocate(\"t0_not_lost_following_wave\", .before = starts_with(\"t1_\")) |>\n  relocate(all_of(t1_name_exposure_binary), .before = starts_with(\"t2_\")) |>\n  droplevels()\n\ncolnames(df_grf)\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# make sure to do this\n# save final data\nmargot::here_save(df_grf, \"df_grf\")\n\ncli::cli_h1(\"saved data `df_grf` for models ✔\")\n\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n\n# check final dataset\ncolnames(df_grf)\n\n# visualise missing\n# should have no missing in t1 and t2 variables\n# handled by IPCW\n# make final missing data graph\nmissing_final_data_plot <- naniar::vis_miss(df_grf, warn_large_data = FALSE)\nmissing_final_data_plot\n\n# save plot\nmargot_save_png(missing_final_data_plot, prefix = \"missing_final_data\")\n\n# checks\ncolnames(df_grf)\nstr(df_grf)\n\n# check exposures\ntable(df_grf[[t1_name_exposure_binary]])\n\n# check\nhist(df_grf$t1_adjusted_weights)\n\n# calculate summary statistics\nt0_weight_summary <- summary(df_wide_encoded)\n\n# check\nglimpse(df_grf$t1_adjusted_weights)\n\n# visualise weight distributions\nhist(df_grf$t1_adjusted_weights, main = \"t0_stabalised weights\", xlab = \"Weight\")\n\n# check n\nn_observed_grf <- nrow(df_grf)\n\n# view\nn_observed_grf\n\n# save\nmargot::here_save(n_observed_grf, \"n_observed_grf\")\n\n\n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n# +--------------------------+\n# |     END                  |\n# +--------------------------+\n\n# this is just for your interest ------------------------------------------\n# not used in final manuscript\n# FOR INTEREESTS\n# inspect propensity scores -----------------------------------------------\n# get data\n# df_grf <- here_read('df_grf')\n# \n# # assign weights var name\n# weights_var_name = \"t0_adjusted_weights\"\n# \n# # baseline covariates  # E already exists and is defined\n# E\n# \n# # must be a data frame, no NA in exposure\n# \n# # df_grf is a data frame - we must process this data frame in several steps\n# # user to specify which columns are outcomes, default to 'starts_with(\"t2_\")'\n# df_propensity_org <- df_grf |> select(!starts_with(\"t2_\"))\n# \n# # Remove NAs and print message that this has been done\n# df_propensity <- df_propensity_org |> drop_na() |> droplevels()\n# \n# # E_propensity_names\n# # first run model for baseline propensity if this is selected.  The default should be to not select it.\n# propensity_model_and_plots <- margot_propensity_model_and_plots(\n#   df_propensity = df_propensity,\n#   exposure_variable = t1_name_exposure_binary,\n#   baseline_vars = E,\n#   weights_var_name = weights_var_name,\n#   estimand = \"ATE\",\n#   method = \"ebal\",\n#   focal = NULL\n# )\n# \n# # visualise\n# summary(propensity_model_and_plots$match_propensity)\n# \n# # key plot\n# propensity_model_and_plots$love_plot\n# \n# # other plots\n# propensity_model_and_plots$summary_plot\n# propensity_model_and_plots$balance_table\n# propensity_model_and_plots$diagnostics\n# \n# \n# # check size\n# size_bytes <- object.size(propensity_model_and_plots)\n# print(size_bytes, units = \"auto\") # Mb\n# \n# # use qs to save only if you have space\n# here_save_qs(propensity_model_and_plots,\n#              \"propensity_model_and_plots\",\n#              push_mods)\n```\n:::\n\n\n\n\n## Script 3: Models & Graphs is HERE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# script 3: causal workflow for estimating average treatment effects using margot\n# may 2025\n# questions: joseph.bulbulia@vuw.ac.nz\n\n# +--------------------------+\n# |       DO NOT ALTER       |\n# +--------------------------+\n\n# restart fresh session\n\nrstudioapi::restartSession()\n\n\n\n# reproducibility ---------------------------------------------------------\n\n\nset.seed(123)\n\n\n# essential library ---------------------------------------------------------\nif (!require(margot, quietly = TRUE)) {\n  devtools::install_github(\"go-bayes/margot\")\n  library(margot)\n}\n\n\nif (packageVersion(\"margot\") < \"1.0.37\") {\n  stop(\"please install margot >= 1.0.37 for this workflow\\n\n       run: devtools::install_github(\\\"go-bayes/margot\\\")\n\")\n}\n\n# call library\nlibrary(\"margot\")\n\n# check package version\npackageVersion(pkg = \"margot\")\n\n\n\n# load libraries ----------------------------------------------------------\n# pacman will install missing packages automatically\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\npacman::p_load(\n  tidyverse,       # data wrangling + plotting\n  qs,              # fast data i/o\n  here,            # project-relative file paths\n  data.table,      # fast data manipulation\n  fastDummies,     # dummy variable creation\n  naniar,          # missing data handling\n  skimr,           # summary statistics\n  grf, ranger,     # machine learning forests\n  doParallel,      # parallel processing,\n  kableExtra,\n  ggplot2 ,        # graphs\n  rlang ,          # functions for base types/Core R/ 'Tidyverse'\n  purrr ,          # functional programming tools.\n  patchwork,      # nice graph placement\n  janitor,         # nice labels\n  glue,            # format/ interpolate a string\n  cli\n)\n\n\n\n# directory path configuration -----------------------------------------------\n# save path (customise for your own computer) ----------------------------\npush_mods <- here::here(\"save_directory\") \n\n# read original data (for plots) ------------------------------------------\noriginal_df <- margot::here_read(\"df_wide\", push_mods)\n\n# plot title --------------------------------------------------------------\ntitle_binary = \"Effects of {{name_exposure}} on {{name_outcomes}}\"\nfilename_prefix = \"grf_extraversion_wb\"\n\n# for manuscript later\nmargot::here_save(title_binary,\"title_binary\")\n\n# import names ------------------------------------------------------------\nname_exposure <- margot::here_read(\"name_exposure\")\nname_exposure\n\n# make exposure names\nt1_name_exposure_binary <- paste0(\"t1_\", name_exposure, \"_binary\")\n\n# check exposure name\nt1_name_exposure_binary\n\n# read outcome vars\noutcome_vars <- margot::here_read(\"outcome_vars\")\n\n# read and sort outcome variables -----------------------------------------\n# we do this by domain: health, psych, present, life, social\nread_and_sort <- function(key) {\n  raw  <- margot::here_read(key, push_mods)\n  vars <- paste0(\"t2_\", raw, \"_z\")\n  sort(vars)\n}\nt2_outcome_z  <- read_and_sort(\"outcome_vars\")\n\n# view\nt2_outcome_z\n\n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n\n\n# define names for titles -------------------------------------------------\n\nnice_exposure_name = \"Extraversion\"\nnice_outcome_name = \"Wellbeing\"\ntitle = \"Effect of {{nice_exposure_name}} on {{nice_outcome_name}}\"\n\n# save for final rport\nhere_save(title, \"title\")\n\n# combine outcomes ---------------------------------------------------------\n# check outcome vars and make labels for graphs/tables\noutcome_vars\n\n\nlabel_mapping_all <- list(\n  #\"t2_alcohol_frequency_weekly_z\" = \"Alcohol Frequency\",\n  #\"t2_alcohol_intensity_weekly_z\" = \"Alcohol Intensity\",\n  #\"t2_hlth_bmi_z\" = \"BMI\",\n  #\"t2_hlth_sleep_hours_z\" = \"Sleep\",\n  \"t2_log_hours_exercise_z\" = \"Hours of Exercise (log)\",\n  #\"t2_short_form_health_z\" = \"Short Form Health\"\n  \"t2_hlth_fatigue_z\" = \"Fatigue\",\n  \"t2_kessler_latent_anxiety_z\" = \"Anxiety\",\n  \"t2_kessler_latent_depression_z\" = \"Depression\",\n  \"t2_rumination_z\" = \"Rumination\",\n  # \"t2_bodysat_z\" = \"Body Satisfaction\",\n  \"t2_foregiveness_z\" = \"Forgiveness\",\n  \"t2_perfectionism_z\" = \"Perfectionism\", \n  \"t2_self_esteem_z\" = \"Self Esteem\",\n  # \"t2_self_control_z\" = \"Self Control\",\n  # \"t2_sexual_satisfaction_z\" = \"Sexual Satisfaction\".\n  \"t2_gratitude_z\" = \"Gratitude\",\n  \"t2_lifesat_z\" = \"Life Satisfaction\",\n  \"t2_meaning_purpose_z\" = \"Meaning: Purpose\",\n  \"t2_meaning_sense_z\" = \"Meaning: Sense\",\n  \"t2_pwi_z\" = \"Personal Well-being Index\",\n  \"t2_belong_z\" = \"Social Belonging\",\n  \"t2_neighbourhood_community_z\" = \"Neighbourhood Community\",\n  \"t2_support_z\" = \"Social Support\"\n)\n\n\n# save\nhere_save(label_mapping_all, \"label_mapping_all\")\n\n# check\nlabel_mapping_all\n\ncli::cli_h1(\"created and saved label_mapping for use in graphs/tables ✔\")\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# select options that make sense fo your study/results\n# might need to be tweaked after the analysis\n\n# make options -------------------------------------------------------------\n# titles\ntitle = \"ATE Effects of {{nice_name_exposure}} on {{nice_name_outcome}}\"\nsubtitle = \"\"\nfilename_prefix = \"final_report\"\n\n\n# settings\nx_offset = -.5\nx_lim_lo = -.5\nx_lim_hi = .5\n\n\n# defaults for ate plots\nbase_defaults_binary <- list(\n  type = \"RD\",\n  title = title_binary,\n  e_val_bound_threshold = 1.2,\n  colors = c(\n    \"positive\" = \"#E69F00\",\n    \"not reliable\" = \"grey50\",\n    \"negative\" = \"#56B4E9\"\n  ),\n  x_offset = x_offset,\n  # will be set based on type\n  x_lim_lo = x_lim_lo,\n  # will be set based on type\n  x_lim_hi = x_lim_hi,\n  text_size = 4,\n  linewidth = 0.5,\n  estimate_scale = 1,\n  base_size = 18,\n  point_size = 2,\n  title_size = 19,\n  subtitle_size = 16,\n  legend_text_size = 10,\n  legend_title_size = 10,\n  include_coefficients = FALSE\n)\n\n# health graph options\noutcomes_options_all <- margot_plot_create_options(\n  title = subtitle,\n  base_defaults = base_defaults_binary,\n  subtitle = subtitle,\n  filename_prefix = filename_prefix\n)\n\n\n# policy tree graph settings ----------------------------------------------\ndecision_tree_defaults <- list(\n  span_ratio       = .3,\n  text_size        = 3.8,\n  y_padding        = 0.25,\n  edge_label_offset = .002,\n  border_size      = .05\n)\npolicy_tree_defaults <- list(\n  point_alpha       = .5,\n  title_size        = 12,\n  subtitle_size     = 12,\n  axis_title_size   = 12,\n  legend_title_size = 12,\n  split_line_color  = \"red\",\n  split_line_alpha  = .8,\n  split_label_color = \"red\",\n  list(split_label_nudge_factor = 0.007)\n)\n\n\n\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n\n# +----------------------------------------------+\n# |       DO NOT ALTER  (except where noted)     |\n# +----------------------------------------------+\n\n# load GRF data and prepare inputs ----------------------------------------\ndf_grf <- margot::here_read('df_grf', push_mods)\nE      <- margot::here_read('E',      push_mods)\n# check exposure binary\nstopifnot(all(df_grf[[t1_name_exposure_binary]][!is.na(df_grf[[t1_name_exposure_binary]])] %in% 0:1))\n# set exposure and weights\n\nW       <- as.vector(df_grf[[t1_name_exposure_binary]]) # note it is the processed weights for attrition \"t1\"\n\n# old workflow\n# weights <- df_grf$t1_adjusted_weights\n\n# new weights workflow, use \"combo_weights\" -- see revised script 2\nweights<- df_grf$combo_weights\n\nhist(weights) # quick check for extreme weights\n# select covariates and drop numeric attributes\nX <- margot::remove_numeric_attributes(df_grf[E])\n\n\n# set model defaults -----------------------------------------------------\ngrf_defaults <- list(seed = 123, stabilize.splits = TRUE, num.trees = 2000)\n\n\n# example: fit causal forest on a toy subset ------------------------------\n# first, create a smaller test sample\nn   <- nrow(X)\ntoy <- sample(seq_len(n), floor(n / 4))\n# define toy data\ntoy_data     <- df_grf[toy, ]\nX_toy        <- X[toy, ]\nW_toy        <- W[toy]\nweights_toy  <- weights[toy]\n\n# fit the model\ncf_out <- margot_causal_forest(\n  data         = toy_data,\n  # +--------------------------+\n  # |    MODIFY THIS           |\n  # +--------------------------+\n  outcome_vars = \"t2_kessler_latent_depression_z\", # select variable in your outcome_variable set\n  # +--------------------------+\n  # |   END MODIFY             |\n  # +--------------------------+\n  covariates   = X_toy,\n  W            = W_toy,\n  weights      = weights_toy,\n  save_data    = TRUE,\n  save_models  = TRUE\n)\n\n# inspect propensities ------------------------------------------------------\nqini_tbl <- margot::margot_inspect_qini(cf_out, propensity_bounds = c(0.01, 0.97))\n\n# show\nprint(qini_tbl)\n\n# plot policy-combo trees --------------------------------------------------\ncombo1 <- margot_plot_policy_combo(\n  result_object    = cf_out,\n  # +--------------------------+\n  # |    MODIFY THIS           |\n  # +--------------------------+\n  model_name       = \"model_t2_kessler_latent_depression_z\",\n  # +--------------------------+\n  # |   END MODIFY             |\n  # +--------------------------+\n  max_depth        = 1L,          # depth-1 tree\n  decision_tree_args = list(text_size = 4),\n  policy_tree_args   = list(point_alpha = 0.7),\n  original_df        = original_df,\n  label_mapping      = label_mapping_all\n)\n\n# show\ncombo1$combined_plot\n\n# you can repeat for depth-2 ----------------------------------------------\ncombo2 <- margot_plot_policy_combo(\n  result_object    = cf_out,\n  # +--------------------------+\n  # |    MODIFY THIS           |\n  # +--------------------------+\n  model_name       = \"model_t2_kessler_latent_depression_z\",\n  # +--------------------------+\n  # |   END MODIFY             |\n  # +--------------------------+\n  max_depth        = 2L,\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args   = policy_tree_defaults,\n  original_df        = original_df,\n  label_mapping      = label_mapping_all\n)\n\n# show\ncombo2$combined_plot\n\n# batch plotting ----------------------------------------------------------\nmodels_batch_1L <- margot_policy(\n  cf_out,\n  save_plots         = FALSE,\n  output_dir         = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args   = policy_tree_defaults,\n  # +--------------------------+\n  # |    MODIFY THIS           |\n  # +--------------------------+\n  model_names        = \"model_t2_kessler_latent_depression_z\",\n  # +--------------------------+\n  # |   END MODIFY             |\n  # +--------------------------+\n  original_df        = original_df,\n  label_mapping      = label_mapping_all,\n  max_depth          = 1L\n)\n\n# view first model's plots\nmodels_batch_1L[[1]][[3]]  # combo plot\nmodels_batch_1L[[1]][[4]]  # qini plot\n\n# sub plots\nmodels_batch_1L[[1]][[1]]  # predictions of policy tree\nmodels_batch_1L[[1]][[2]]  # policy tree\n\n# qini interpretations at different spends\n# negative is bad\nmodels_batch_1L[[1]][[5]]  \n\n# 2L tree\nmodels_batch_2L <- margot_policy(\n  cf_out,\n  save_plots         = FALSE,\n  output_dir         = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args   = policy_tree_defaults,\n  # +--------------------------+\n  # |    MODIFY THIS           |\n  # +--------------------------+\n  model_names        = \"model_t2_kessler_latent_depression_z\",\n  # +--------------------------+\n  # |   END MODIFY             |\n  # +--------------------------+\n  original_df        = original_df,\n  label_mapping      = label_mapping_all,\n  max_depth          = 2L)\n# view first model's plots\nmodels_batch_2L[[1]][[3]]  # combo plot\nmodels_batch_2L[[1]][[4]]  # qini plot - not convincing\n\n# 2. flip the selected outcomes (and regen trees)\n# use -- when the outcome is undesirable and we want to minimise it \n# (assuming the exposure is something we'd prescribe)\n\n# select models whose outcomes are undesirable  when the intervention is meant to be 'good'\n# such variables will be specific to your study \n\n# +--------------------------+\n# |    MODIFY THIS           |\n# +--------------------------+\n\nflip_outcomes_test = c(\"t2_kessler_latent_depression_z\")\n\n# function to get the labels from the models (labels were defined above)\nflipped_names_test <- margot_get_labels(flip_outcomes_test, label_mapping_all)\n\n# +--------------------------+\n# |   END MODIFY             |\n# +--------------------------+\n\n# run flip forests\ncf_out_f <- margot_flip_forests(\n  model_results = cf_out,\n  flip_outcomes = flip_outcomes_test,\n  recalc_policy = TRUE\n)\n\n# where there are very low or high propensity scores (prob of exposure) \n# we might consider trimming\nmargot::margot_inspect_qini(cf_out_f, propensity_bounds = c(0.01, 0.97))\n\n\n# if we had extreme scores (not used here)\n# cf_out_flipped_trimmed <- margot_rescue_qini(model_results      = cf_out_f,\n#                                              propensity_bounds  = c(0.05, 0.95)) \n\n\n# flipped batch model\nmodels_batch_flipped_1L <- margot_policy(\n  cf_out_f,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  # +--------------------------+\n  # |    MODIFY THIS           |\n  # +--------------------------+\n  model_names = c(\"model_t2_kessler_latent_depression_z\"),\n  # +--------------------------+\n  # |   END MODIFY             |\n  # +--------------------------+\n  original_df = original_df,\n  label_mapping = label_mapping_all,\n  max_depth     = 1L\n)\n\nmodels_batch_flipped_1L[[1]][[3]]\n\n# flipped batch model\nmodels_batch_flipped_2L <- margot_policy(\n  cf_out_f,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  # +--------------------------+\n  # |    MODIFY THIS           |\n  # +--------------------------+\n  model_names = c(\"model_t2_kessler_latent_depression_z\"),\n  # +--------------------------+\n  # |   END MODIFY             |\n  # +--------------------------+\n  original_df = original_df,\n  label_mapping = label_mapping_all,\n  max_depth     = 2L\n)\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# flipped\n# interpretation: exposure minimising depression\nmodels_batch_flipped_2L[[1]][[3]]\n\n\n# *** NOTE DIFFERENCES IN INTERPRETATION\n\n# not flipped: exposure as maximizing depression\nmodels_batch_2L[[1]][[3]]\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n# interpretation example \n\n\ncli::cli_h1(\"created and saved label_mapping for use in graphs/tables ✔\")\n\n\n# test interpretations ----------------------------------------------------\n\n\n# policy tree interpretation: search depth = 1\ninterpret_model_policy_test_1L <- margot_interpret_policy_batch(cf_out_f, max_depth = 1)\ncat(interpret_model_policy_test_1L)\n\n\n# policy tree interpretation: search depth = 2\ninterpret_model_policy_test_2L <- margot_interpret_policy_batch(cf_out_f, max_depth = 2)\ncat(interpret_model_policy_test_2L)\n\n\n\n# interpret rate ----------------------------------------------------------\n\n# create rate analysis table\nrate_table_all_test <- margot_rate(\n  models = cf_out_f,\n  policy = \"treat_best\",  # or \"withold_best\" but don't attempt fitting curves or policytrees\n  label_mapping = label_mapping_all\n)\n\n# view rate tables\nrate_table_all_test$rate_autoc |> kbl(\"markdown\")\nrate_table_all_test$rate_qini |> kbl(\"markdown\")\n\n\n# generate interpretation\nrate_interpretation_all <- margot_interpret_rate(\n  rate_table_all_test, \n  flipped_outcomes = flipped_names_test\n)\n\n\n\ncli::cli_h1(\"testing on smaller dataset completed ✔\")\n\n\n# ** uncomment to run full model**\n\n# causal forest model -----------------------------------------------------------\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# !!!! THIS WILL TAKE TIME  !!!!!\nmodels_binary <- margot::margot_causal_forest(\n  data = df_grf,\n  outcome_vars = t2_outcome_z,\n  covariates = X,\n  W = W,\n  weights = weights,\n  grf_defaults = grf_defaults,\n  top_n_vars = 15,\n  save_models = TRUE,\n  save_data = TRUE,\n  train_proportion = 0.7\n)\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# !!!! THIS WILL TAKE TIME  !!!!!\n# save model\nmargot::here_save_qs(models_binary, \"models_binary\", push_mods)\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n\ncli::cli_h1(\"causal forest model completed and saved ✔\")\n\n\n# read results ------------------------------------------------------------\n# if you save models you do not need to re-run them\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# reading models takes time\n# if you want to check the size of an object use\n# margot::margot_size(object)\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# !!!! THIS WILL TAKE TIME  !!!!!\nmodels_binary <- margot::here_read_qs(\"models_binary\", push_mods)\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n# count models by category\n# just a check\ncat(\"Number of original models:\\n\", length(models_binary$results), \"\\n\")\n\n\n# make ate plots ----------------------------------------------------------\nbinary_results <- margot_plot(\n  models_binary$combined_table,\n  options = outcomes_options_all,\n  label_mapping = label_mapping_all,\n  include_coefficients = FALSE,\n  save_output = FALSE,\n  order = \"evaluebound_asc\",\n  original_df = original_df,\n  e_val_bound_threshold = 1.2\n)\n\n# view\nbinary_results$transformed_table |> rename(\"E-Value\" = \"E_Value\", \"E-Value bound\" = \"E_Val_bound\") |>\n  kbl(format = 'markdown')\n\n# check\nbinary_results$plot\n\n# interpretation\ncat(binary_results$interpretation)\n\n# nice table\ntables_list <- list(\n  Wellbeing = binary_results$transformed_table\n)\n\n# make markdown tables (to be imported into the manuscript)\nmargot_bind_tables_markdown <- margot_bind_tables(\n  tables_list = tables_list,\n  #list(all_models$combined_table),\n  sort_E_val_bound = \"desc\",\n  e_val_bound_threshold = 1.2,\n  # ← choose threshold\n  highlight_color = NULL,\n  bold = TRUE,\n  rename_cols = TRUE,\n  col_renames = list(\"E-Value\" = \"E_Value\", \"E-Value bound\" = \"E_Val_bound\"),\n  rename_ate = TRUE,\n  threshold_col = \"E_Val_bound\",\n  output_format = \"markdown\",\n  kbl_args = list(\n    booktabs = TRUE,\n    caption = NULL,\n    align = NULL\n  )\n)\n\n# view markdown table\nmargot_bind_tables_markdown\n\n# save for publication\nhere_save(margot_bind_tables_markdown, \"margot_bind_tables_markdown\")\n\n\n# evaluate models ---------------------------------------------------------\n# trim models if extreme propensity scores dominate\n# diag_tbl_98 <- margot_inspect_qini(models_binary,\n#                                        propensity_bounds = c(0.01, 0.99))\n\n\n\n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n\n# flipping models: outcomes we want to minimise given the exposure --------\n# standard negative outcomes/  not used in this example\n# flipping models: outcomes we want to minimise given the exposure --------\n# standard negative outcomes/  not used in this example\n# +--------------------------+\n# |    MODIFY THIS           |\n# +--------------------------+\n\n# WHICH OUTCOMES -- if any ARE UNDESIREABLE? \nflip_outcomes_standard = c(\n  #\"t2_alcohol_frequency_weekly_z\",\n  #\"t2_alcohol_intensity_z\",\n  #\"t2_hlth_bmi_z\",\n  #\"t2_hlth_fatigue_z\",\n  \"t2_kessler_latent_anxiety_z\", #  ← select\n  \"t2_kessler_latent_depression_z\",#  ← select\n  \"t2_rumination_z\" #  ← select\n  #\"t2_perfectionism_z\" # the exposure variable was not investigated\n)\n\n# when exposure is negative and you want to focus on how much worse off\n# some people are use this: \n\n# NOT IF THE EXPOSURE IS NEGATIVE, FOCUS ON WHICH OUTCOMES, if any, ARE POSITIVE AND FLIP THESE?\n# flip_outcomes<- c( setdiff(t2_outcomes_all, flip_outcomes_standard) )\n\n# our example has the exposure as positive\nflip_outcomes <- flip_outcomes_standard\n\n# check\nflip_outcomes\n\n\n# +--------------------------+\n# |   END MODIFY             |\n# +--------------------------+\n\n# checks for when exposure is *damaging** \n# neg_check <- vapply(all_models$results[ paste0(\"model_\", flip_outcomes) ],\n#                     \\(x) mean(x$tau_hat, na.rm = TRUE) < 0, logical(1))\n# stopifnot(all(neg_check))   # every chosen outcome has a negative mean cate\n\n# get labels\nflipped_names <- margot_get_labels(flip_outcomes, label_mapping_all)\n\n# check\nflipped_names\n\n# save for publication\nhere_save(flipped_names, \"flipped_names\")\n\ncli::cli_h1(\"flipped outcomes identified and names saved ✔\")\n\n\n# flip negatively oriented outcomes --------------------------------------\n\n# +--------------------------+\n# |       DO NOT ALTER       |\n# +--------------------------+\n\n\n# flip models using margot's function\n\n#  *** this will take some time ***\n\n# ** give it time **\n# ** once run/ comment out **\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# !!!! THIS WILL TAKE TIME  !!!!!\nmodels_binary_flipped_all <- margot_flip_forests(models_binary,\n                                                 flip_outcomes = flip_outcomes_standard,\n                                                 recalc_policy = TRUE)\n\ncli::cli_h1(\"flipped forest models completed ✔\")\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# !!!! THIS WILL TAKE TIME  !!!!!\n# save\nhere_save_qs(models_binary_flipped_all, \"models_binary_flipped_all\", push_mods)\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# !!!! THIS WILL TAKE TIME  !!!!!\n# read back if needed\nmodels_binary_flipped_all <- here_read_qs(\"models_binary_flipped_all\", push_mods)\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n\n# where there are very low or high propensity scores (prob of exposure) we might consider trimming\n# margot::margot_inspect_qini(models_binary_flipped_all, propensity_bounds = c(0.05, 0.95))\n# \n# \n# # if we had extreme scores (not used here)\n# models_binary_flipped_all_t <- margot_rescue_qini(model_results  = models_binary_flipped_all,\n#                                              propensity_bounds  = c(0.05, 0.95))\n\n\n\n# omnibus heterogeneity tests --------------------------------------------\n# test for treatment effect heterogeneity across all outcomes\nresult_ominbus_hetero_all <- margot::margot_omnibus_hetero_test(models_binary_flipped_all,\n                                                                label_mapping = label_mapping_all)\n\n# view results table\nresult_ominbus_hetero_all$summary_table |> kbl(\"markdown\")\n\n# view test interpretation\ncat(result_ominbus_hetero_all$brief_interpretation)\n\n# rate test analysis -----------------------------------------------------\n# create rate analysis table\nrate_table_all <- margot_rate(\n  models = models_binary_flipped_all,\n  policy = \"treat_best\",  # or \"withold_best\" but don't attempt fitting curves or policytrees\n  label_mapping = label_mapping_all\n)\n\n# view rate tables\nrate_table_all$rate_autoc |> kbl(\"markdown\")\nrate_table_all$rate_qini |> kbl(\"markdown\")\n\n# generate interpretation\nrate_interpretation_all <- margot_interpret_rate(\n  rate_table_all, \n  flipped_outcomes = flipped_names\n)\n\n# view interpretations\ncat(rate_interpretation_all$autoc_results)\ncat(rate_interpretation_all$qini_results)\n\n# compare rate and qini -- see grf documentation\ncat(rate_interpretation_all$comparison)\n\n# check out model names for different ways of thinking about heterogeneity\nrate_interpretation_all$either_model_names\nrate_interpretation_all$qini_model_names\nrate_interpretation_all$both_model_names\nrate_interpretation_all$autoc_model_names\n\n\ncli::cli_h1(\"produced rate tables and interpretations ✔\")\n\n\n# autoc plots ------------------------------------------------------------\n# generate batch rate plots for models with significant heterogeneity\nbatch_rate_autoc_plots <- margot_plot_rate_batch(\n  models_binary_flipped_all,\n  save_plots = FALSE,\n  # just use rate autoc for rate plots\n  model_names = rate_interpretation_all$autoc_model_names\n)\n\n# extract individual plots from the batch result\nautoc_plots <- batch_rate_autoc_plots\n\n# determine number of columns based on number of plots\nnum_cols <- ifelse(length(autoc_plots) > 3, 2, 1)\n\n# combine plots using patchwork\nlibrary(patchwork)\n\n# only proceed if there are plots to combine\nif (length(autoc_plots) > 0) {\n  # initialize with first plot\n  combined_autoc_plot <- autoc_plots[[1]]\n  \n  # add remaining plots if any\n  if (length(autoc_plots) > 1) {\n    for (i in 2:length(autoc_plots)) {\n      combined_autoc_plot <- combined_autoc_plot + autoc_plots[[i]]\n    }\n  }\n  \n  # apply the dynamic layout\n  combined_autoc_plot <- combined_autoc_plot +\n    plot_layout(ncol = num_cols) &\n    plot_annotation(\n      title = \"AUTOC Model Plots\",\n      subtitle = paste0(length(autoc_plots), \" models with significant heterogeneity\"),\n      tag_levels = \"A\"\n    )\n  \n  # view the combined plot\n  print(combined_autoc_plot)\n  \n  # save the combined plot if needed\n  width <- ifelse(num_cols == 1, 8, 12)\n  height <- 6 * ceiling(length(autoc_plots) / num_cols)\n  \n  ggsave(\n    here::here(push_mods, \"combined_autoc_plots.pdf\"),\n    combined_autoc_plot,\n    width = width,\n    height = height\n  )\n} else {\n  # handle case with no plots\n  message(\"No AUTOC plots available\")\n}\n\nmodels_batch_qini_2L_test <- margot_plot_policy_combo(\n  models_binary_flipped_all,\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  model_name =  \"model_t2_log_hours_exercise_z\",\n  max_depth  = 2L,\n  # ← new argument\n  original_df = original_df,\n  label_mapping = label_mapping_all\n)\nrate_interpretation_all$autoc_model_names\n\n\ncli::cli_h1(\"produced rate graphs ✔\")\n\n\n# qini --------------------------------------------------------------------\n# run the margot_policy function\nmodels_batch_qini_2L <- margot_policy(\n  models_binary_flipped_all,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  model_names = rate_interpretation_all$qini_model_names,\n  max_depth  = 2L,\n  # ← new argument\n  original_df = original_df,\n  label_mapping = label_mapping_all\n)\n\n# extract the plots from the results\nplots <- lapply(seq_along(models_batch_qini_2L), function(i) {\n  models_batch_qini_2L[[i]][[4]]  # extract the 4th element (plot) from each model\n})\n\nplots\n# name the plots\nnames(plots) <- rate_interpretation_all$qini_model_names\n\n# determine number of columns based on number of plots\nnum_cols <- ifelse(length(plots) > 3, 2, 1)\n\n# load the patchwork library for combining plots\nlibrary(patchwork)\n\n# check if there are any plots to combine\nif (length(plots) == 0) {\n  message(\"no plots available to combine\")\n  NULL  # removed return since this isn't in a function\n} else {\n  # create combined plot\n  combined_plot <- plots[[1]]\n  \n  # only run the loop if there are at least 2 plots\n  if (length(plots) > 1) {\n    for (i in 2:length(plots)) {\n      combined_plot <- combined_plot + plots[[i]]\n    }\n  }\n  \n  # apply the dynamic layout\n  combined_plot <- combined_plot + plot_layout(ncol = num_cols)\n  # add titles and annotations\n  combined_plot <- combined_plot &\n    plot_annotation(\n      title = \"Qini Model Plots\",\n      subtitle = paste0(length(plots), \n                        ifelse(length(plots) == 1, \" model \", \" models \"), \n                        \"arranged in \", num_cols, \n                        ifelse(num_cols == 1, \" column\", \" columns\")),\n      tag_levels = \"A\"  # adds a, b, c, etc. to the plots\n    )\n  # view\n  combined_plot\n  # save (optional)\n  width <- ifelse(num_cols == 1, 8, 12)\n  height <- 6 * ceiling(length(plots)/num_cols)  # height per row * number of rows\n  # save\n  ggsave(here::here(push_mods, \"combined_qini_plots.pdf\"),\n         combined_plot,\n         width = width, height = height)\n  \n  combined_plot  # removed return since this isn't in a function\n}\n\ncli::cli_h1(\"produced essential qini graphs ✔\")\n\n\n# interpretation ----------------------------------------------------------\n# interpret qini curves\ninterpretation_qini_curves_2L <- margot_interpret_qini(\n  models_batch_qini_2L,\n  model_names = rate_interpretation_all$qini_model_names,\n  label_mapping = label_mapping_all\n)\ninterpretation_qini_curves_2L\n\n# view qini interpretation\ncat(interpretation_qini_curves_2L$qini_explanation)\n\n# view summary table\ninterpretation_qini_curves_2L$summary_table |> kbl(\"markdown\")\n\n\n\n# policy tree analysis depth 1 L------------------------------------------------\n# make policy trees\n# 1 l decision trees are generally very bad\nplots_policy_trees_1L <- margot_policy(\n  models_binary_flipped_all,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  model_names = rate_interpretation_all$either_model_names,\n  # defined above\n  original_df = original_df,\n  label_mapping = label_mapping_all,\n  max_depth = 1L\n)\n\n# get number of models\nn_models <- length(rate_interpretation_all$either_model_names)\n\n# # use purrr to map through and print each model\n# purrr::map(1:n_models, function(i) {\n#   # print model name as a header\n#   cat(\"# model\", i, \"\\n\")\n#   # print the corresponding model plot\n#   print(plots_policy_trees_1L[[i]][[3]])\n#   # add spacing between models\n#   cat(\"\\n\\n\")\n# })\n\nmodel_outputs_1L <- purrr::map(1:n_models, ~plots_policy_trees_1L[[.x]][[3]])\n\n# name the list elements by model number\nnames(model_outputs_1L) <- paste0(\"model_\", 1:n_models)\n\n\n# check number of models == n_models\nmodel_outputs_1L$model_1 # convincing?\nmodel_outputs_1L$model_2 # convincing?\n# model_outputs_1L$model_3 # convincing?\n\n\n\n# policy tree analysis depth 2L -------------------------------------------------\n# make policy trees\n# *** 2l is much more persuasive ***\nplots_policy_trees_2L <- margot_policy(\n  models_binary_flipped_all,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  model_names = rate_interpretation_all$either_model_names,\n  # defined above\n  original_df = original_df,\n  label_mapping = label_mapping_all,\n  max_depth = 2L\n)\n\nn_models <- length(rate_interpretation_all$either_model_names)\n\nmodel_outputs_2L <- purrr::map(1:n_models, ~plots_policy_trees_2L[[.x]][[3]])\nnames(model_outputs_2L) <- paste0(\"model_\", 1:n_models)\n\n\n# view plots (two in this example)\nmodel_outputs_2L$model_1\nmodel_outputs_2L$model_2\n#model_outputs_2L$model_3\n\n\n# convincing?\ninterpret_plots_policy_trees_2L <- margot_interpret_policy_batch(\n  models_binary_flipped_all, model_names = rate_interpretation_all$either_model_names)\n\n\n# view interpretation\ncat(interpret_plots_policy_trees_2L)\n\n# +--------------------------+\n# |     END DO NOT ALTER     |\n# +--------------------------+\n\n\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n# you can investigate policy trees for all outcomes, mindful that the rate and qini are not reliable. \n# still, with appropriate caution, this may help to clarify psychologically interesting questions\n\nall_plots_policy_trees_1L <- margot_policy(\n  models_binary_flipped_all,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  # model_names = rate_interpretation_all$either_model_names, # use all\n  # defined above\n  original_df = original_df,\n  label_mapping = label_mapping_all,\n  max_depth = 1L\n)\nn_models_all <- length(models_binary_flipped_all$results)\nn_models_all\n\nmodel_outputs_1L_all <- purrr::map(1:n_models_all, ~all_plots_policy_trees_1L[[.x]][[3]])\nnames(model_outputs_1L_all) <- paste0(\"model_\", 1:n_models_all)\n\n# view\nmodel_outputs_1L_all$model_1 # ← convincing? \nmodel_outputs_1L_all$model_2 # ← convincing? \nmodel_outputs_1L_all$model_3 # ← convincing? \nmodel_outputs_1L_all$model_4 # ← convincing? \nmodel_outputs_1L_all$model_5 # ← convincing? \nmodel_outputs_1L_all$model_6 # ← convincing? \nmodel_outputs_1L_all$model_7 # ← convincing? \nmodel_outputs_1L_all$model_8 # ← convincing? \nmodel_outputs_1L_all$model_9 # ← convincing?  \nmodel_outputs_1L_all$model_10 # ← convincing? \nmodel_outputs_1L_all$model_11 # ← convincing? \nmodel_outputs_1L_all$$model_12 # ← convincing? \n\n# interpretation\ninterpret_plots_policy_trees_1L_all <- margot_interpret_policy_batch(models_binary_flipped_all, max_depth = 1)\n\n\n# view interpretation\ncat(interpret_plots_policy_trees_1L_all)\n\n\n# ALL model 2L\nall_plots_policy_trees_2L <- margot_policy(\n  models_binary_flipped_all,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  # model_names = rate_interpretation_all$either_model_names, # use all\n  # defined above\n  original_df = original_df,\n  label_mapping = label_mapping_all,\n  max_depth = 2L\n)\nn_models_all <- length(models_binary_flipped_all$results)\nn_models_all\n\nmodel_outputs_2L_all <- purrr::map(1:n_models_all, ~all_plots_policy_trees_2L[[.x]][[3]])\nnames(model_outputs_2L_all) <- paste0(\"model_\", 1:n_models_all)\n\n# view\nmodel_outputs_2L_all$model_1 # ← convincing? \nmodel_outputs_2L_all$model_2 # ← convincing? \nmodel_outputs_2L_all$model_3 # ← convincing? \nmodel_outputs_2L_all$model_4 # ← convincing? \nmodel_outputs_2L_all$model_5 # ← convincing? \nmodel_outputs_2L_all$model_6 # ← convincing? \nmodel_outputs_2L_all$model_7 # ← convincing? \nmodel_outputs_2L_all$model_8 # ← convincing? \nmodel_outputs_2L_all$model_9 # ← convincing?  \nmodel_outputs_2L_all$model_10 # ← convincing? \nmodel_outputs_2L_all$model_11 # ← convincing? \nmodel_outputs_2L_all$model_12 # ← convincing? \n\n# interpretation\ninterpret_plots_policy_trees_2L_all <- margot_interpret_policy_batch(models_binary_flipped_all, max_depth = 2)\n\n\n# view interpretation\ncat(interpret_plots_policy_trees_2L_all)\n\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n\n\n\n\n\n\n\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n\n\n#############################################################################\n# theoretical comparisons ---------------------------------------------------\n# individual theoretical comparisons (if relevant)\n# need to get values for wealth if wealth is compared\n\n# step 1 get information for wealth for conditonal comparisons\nhead(df_grf$t0_log_household_inc_z)\n\n# get mean on original data scale\nlog_mean_inc <- mean(original_df$t0_log_household_inc, na.rm = TRUE)\n\n# get sd on original data scale\nlog_sd_inc <- sd(original_df$t0_log_household_inc, na.rm = TRUE)\n\n# function to get back to data scale\nmargot_back_transform_log_z(\n  log_mean = log_mean_inc,\n  log_sd = log_sd_inc,\n  z_scores = c(-1, 0, 1),\n  label = \"data_scale\"\n)\n\n# define complex conditions for subsetting\ncomplex_condition_political <- X[, \"t0_political_conservative_z\"] > -1 &\n  X[, \"t0_political_conservative_z\"] < 1\n\ncomplex_condition_wealth <- X[, \"t0_log_household_inc_z\"] > -1 &\n  X[, \"t0_log_household_inc_z\"] < 1\n\ncomplex_condition_age <- X[, \"t0_age_z\"] > -1 &\n  X[, \"t0_age_z\"] < 1\n\n# # if we have specific groups to compare\n# complex_condition_age_under_neg_1_sd  <- X[, \"t0_age_z\"] < -1\n# complex_condition_age_gr_eq_neg_1_sd  <- X[, \"t0_age_z\"] > -1\n\n# check ages to get number\nmean(original_df$t0_age) - sd(original_df$t0_age)\nmean(original_df$t0_age) + sd(original_df$t0_age)\n\n\n# wealth subsets\nsubsets_standard_wealth <- list(\n  Poor = list(\n    var = \"t0_log_household_inc_z\",\n    value = -1,\n    operator = \"<\",\n    description = \"Effects among those HShold income < -1 SD (NZD ~41k)\",\n    label = \"Poor\"  # label remains as is, but could be changed if desired\n  ),\n  MiddleIncome = list(subset_condition = complex_condition_wealth, description = \"Effects among those HS_hold income within +/-1SD (> NZD 41k < NZD 191k)\"),\n  Rich = list(\n    var = \"t0_log_household_inc_z\",\n    value = 1,\n    operator = \">\",\n    description = \"Effects among those HS_hold income > +1 SD (NZD 191k)\",\n    label = \"Rich\"\n  )\n)\n\n# political subsets\nsubsets_standard_political <- list(\n  Liberal = list(\n    var = \"t0_political_conservative_z\",\n    value = -1,\n    operator = \"<\",\n    description = \"Effects among those < -1 SD in political conservativism\",\n    label = \"Liberal\"\n  ),\n  Centrist = list(\n    var = \"t0_political_conservative_z\",\n    # operator = \"<\",\n    subset_condition = complex_condition_political,\n    description = \"Effects among those > -1 SD and < +1 in political conservativism\",\n    label = \"Centrist\"\n  ),\n  Conservative = list(\n    var = \"t0_political_conservative_z\",\n    value = 1,\n    operator = \">\",\n    description = \"Effects among those > +1 SD in political conservativism\",\n    label = \"Conservative\"\n  )\n)\n\n\n# political subsets\nsubsets_standard_age <- list(\n  Younger = list(\n    var = \"t0_age_z\",\n    value = -1,\n    operator = \"<\",\n    description = \"Effects among those < under 35 years old\",\n    label = \"Age < 35\"\n  ),\n  Middle = list(\n    var = \"t0_age_z\",\n    # operator = \"<\",\n    subset_condition = complex_condition_age,\n    description = \"Effects among those 35-62\",\n    label = \"Age 35-62\"\n  ),\n  Older = list(\n    var = \"t0_age_z\",\n    value = 1,\n    operator = \">\",\n    description = \"Effects among those > 62\",\n    label = \"Age > 62\"\n  )\n)\n\n\n# gender subsets\nsubsets_standard_gender <- list(\n  Female = list(\n    var = \"t0_male_binary\",\n    value = 0,\n    description = \"Females\"\n  ),\n  Male = list(\n    var = \"t0_male_binary\",\n    value = 1,\n    description = \"Males\"\n  )\n)\n\n# ethnicity subsets\nsubsets_standard_ethnicity <- list(\n  Asian = list(\n    var = \"t0_eth_cat_asian_binary\",\n    value = 1,\n    description = \"Asians\"\n  ),\n  Euro = list(\n    var = \"t0_eth_cat_euro_binary\",\n    value = 1,\n    description = \"Europeans (Pakeha)\"\n  ),\n  Pacific = list(\n    var = \"t0_eth_cat_pacific_binary\",\n    value = 1,\n    description = \"Pacific Peoples\"\n  ),\n  Maori = list(\n    var = \"t0_eth_cat_maori_binary\",\n    value = 1,\n    description = \"Māori\"\n  )\n)\n\n\n# batch planned subgroup analysis -----------------------------------------\n# set up lists of models, names, and subtitles\ndomain_models <- list(\n  models_binary # HERE WE USE THE ORIGINAL MODELS\n)\n\n\n# set up domain names\ndomain_names <- c(\"wellbeing\")\n\n# set up subtitles\nsubtitles <- \"\"\n\n# set up subset types in a list\nsubset_types <- list(\n  wealth = subsets_standard_wealth,\n  ethnicity = subsets_standard_ethnicity,\n  political = subsets_standard_political,\n  gender = subsets_standard_gender,\n  cohort = subsets_standard_age\n)\n\n\n# run model\nplanned_subset_results <- margot_planned_subgroups_batch(\n  domain_models = domain_models,\n  X = X,\n  base_defaults = base_defaults_binary,\n  subset_types = subset_types,\n  original_df = original_df,\n  domain_names = domain_names,\n  subtitles = subtitles\n)\n\n\n# results\ncat(planned_subset_results$wellbeing$wealth$explanation)\ncat(planned_subset_results$wellbeing$ethnicity$explanation)\ncat(planned_subset_results$wellbeing$political$explanation)\ncat(planned_subset_results$wellbeing$gender$explanation)\ncat(planned_subset_results$wellbeing$cohort$explanation)\n\n\n\n# cohort subgroups --------------------------------------------------------\n\n# plots -------------------------------------------------------------------\n# results plots\n# health\nplots_subgroup_wealth<- wrap_plots(\n  list(\n    planned_subset_results$wellbeing$wealth$results$Poor$plot,\n    planned_subset_results$wellbeing$wealth$results$MiddleIncome$plot,\n    planned_subset_results$wellbeing$wealth$results$Rich$plot\n  ),\n  ncol = 1\n) +\n  patchwork::plot_annotation(title = \"Wealth\",\n                             theme = theme(plot.title = element_text(size = 18, face = \"bold\")))\n\n# view\nplots_subgroup_wealth\n\n# plots\nplots_subgroup_ethnicity <- wrap_plots(\n  list(\n    planned_subset_results$wellbeing$ethnicity$results$Asian$plot,\n    planned_subset_results$wellbeing$ethnicity$results$Euro$plot,\n    planned_subset_results$wellbeing$ethnicity$results$Pacific$plot,\n    planned_subset_results$wellbeing$ethnicity$results$Maori$plot\n    \n  ),\n  ncol = 2\n) +\n  patchwork::plot_annotation(title = \"Ethnicity\",\n                             theme = theme(plot.title = element_text(size = 18, face = \"bold\")))\n\n# view\nprint(plots_subgroup_ethnicity)\n\n# plots\nplots_subgroup_political <- wrap_plots(\n  list(\n    planned_subset_results$wellbeing$political$results$Liberal$plot,\n    planned_subset_results$wellbeing$political$results$Centrist$plot,\n    planned_subset_results$wellbeing$political$results$Conservative$plot  \n  ),\n  ncol = 1\n) +\n  patchwork::plot_annotation(title = \"Political Orientation\",\n                             theme = theme(plot.title = element_text(size = 18, face = \"bold\")))\n\n# view\nprint(plots_subgroup_political)\n\n# plots\nplots_subgroup_gender <- wrap_plots(\n  list(\n    planned_subset_results$wellbeing$gender$results$Female$plot,\n    planned_subset_results$wellbeing$gender$results$Male$plot\n  ),\n  ncol = 1\n) +\n  patchwork::plot_annotation(title = \"Gender\",\n                             theme = theme(plot.title = element_text(size = 18, face = \"bold\")))\n\n# view\nprint(plots_subgroup_gender)\n\n# plots\nplots_subgroup_cohort <- wrap_plots(\n  list(\n    planned_subset_results$wellbeing$cohort$results$`Age < 35`$plot,\n    planned_subset_results$wellbeing$cohort$results$`Age 35-62`$plot,\n    planned_subset_results$wellbeing$cohort$results$`Age > 62`$plot\n  ),\n  ncol = 1\n) +\n  patchwork::plot_annotation(title = \"Age Cohorts\",\n                             theme = theme(plot.title = element_text(size = 18, face = \"bold\")))\n\n# view\nprint(plots_subgroup_cohort)\n\n\n\n# plot options: showcased ---------------------------------------------\n# default\nmargot_plot_decision_tree(models_binary, \"model_t2_support_z\", )\n# tighten branches for easier viewing in single graphs\nmargot::margot_plot_decision_tree(\n  models_binary,\n  \"model_t2_support_z\",\n  span_ratio = .30,\n  text_size = 3.8,\n  border_size = .1,\n  #  title = \"none\",\n  original_df = original_df\n)\n# colour decision node\nmargot::margot_plot_decision_tree(\n  models_binary,\n  \"model_t2_support_z\",\n  span_ratio = .3,\n  text_size = 4,\n  title = \"New Title\",\n  non_leaf_fill =  \"violet\",\n  original_df = original_df\n)\n# make new title\nmargot::margot_plot_decision_tree(\n  models_binary,\n  \"model_t2_support_z\",\n  span_ratio = .2,\n  text_size = 3,\n  title = \"New Title\",\n  non_leaf_fill =  \"white\",\n  original_df = original_df\n)\n\n# remove title\nmargot::margot_plot_decision_tree(\n  models_binary,\n  \"model_t2_support_z\",\n  text_size = 5,\n  title = 'none',\n  # set title to none\n  original_df = original_df\n)\n\n\n# adjust only the alpha\nmargot::margot_plot_policy_tree(models_binary, \"model_t2_support_z\", point_alpha = .1)\nmargot::margot_plot_policy_tree(models_binary, \"model_t2_support_z\", point_alpha = .9)\n```\n:::\n\n\n\n## Code Explanations\n\n### Script 01 Initial Data Wrangling\n\nKey checkpoints in the *wrangle-1* script are as follows;\n\n\n#### First — pick your three study waves* \n\nNote waves run from October --> September of the year following the wave.\n\nNote: \n- baseline variables must appear in the baseline wave\n- the exposure variable must appear in both the baseline wave and exposure wave (but need not appear in the outcome wave)\n- outcome variables must appear in both the baseline wave and outcome wave (but need not appear in the exposure wave.)\n\n\n```r\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# | OPTIONALLY MODIFY SECTION|\n# +--------------------------+\n\n# **  define your study waves **\nbaseline_wave      <- \"2018\"        # baseline measurement\nexposure_waves     <- c(\"2019\")     # when exposure is measured\noutcome_wave       <- \"2020\"        # when outcomes are measured\nall_waves          <- c(baseline_wave, exposure_waves, outcome_wave)\n```\n\n\n\n#### Second — pick your exposure \n\nDecide which variable is the 'cause'. Here it is `extraversion`. Verify it exists at baseline (`t0_`) *and* at the exposure wave (`t1_`)\n\n\n```r\n# define study variables ----------------------------------------------------\n# ** key decision 2: define your exposure variable **\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\nname_exposure <- \"extraversion\"\n\n# exposure variable labels\nvar_labels_exposure <- list(\n  \"extraversion\" = \"Extraversion\",\n  \"extraversion_binary\" = \"Extraversion (binary)\"\n)\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n```\n\n\n#### Third -- choose your outcome variables (ensuring they are in the baseline wave and outcome wave)\n\n\n\n```r\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n# ** key decision 3: define outcome variables **\n# here, we are focussing on a subset of wellbeing outcomes\n# chose outcomes relevant to * your * study. Might be all/some/none/exactly \n# these:\noutcome_vars <- c(\n  # health outcomes\n  # \"alcohol_frequency_weekly\", \"alcohol_intensity\",\n  # \"hlth_bmi\", \n  \"log_hours_exercise\", \n  # \"hlth_sleep_hours\", \n  # \"short_form_health\",\n  \n  # psychological outcomes\n  # \"hlth_fatigue\", \n  \"kessler_latent_anxiety\", \n  \"kessler_latent_depression\", \n  \"rumination\",\n  \n  # well-being outcomes\n  # \"bodysat\", \n  #\"forgiveness\", \"gratitude\", \n  \"lifesat\", \"meaning_purpose\", \"meaning_sense\", \n  # \"perfectionism\", \n  \"pwi\", \n  #\"self_control\", \n  \"self_esteem\", \n  #\"sexual_satisfaction\",\n  \n  # social outcomes\n  \"belong\", \"neighbourhood_community\", \"support\"\n)\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n```\n\n\n#### Fourth: define baseline covariates\n\nDefine baseline variables. The primary role of these variables is to control unmeasured confounding. We will also use these variables to investigate treatment effect heterogeneity. Note that the exposure at baseline and the outcomes at baseline will automatically be included in this set later. \n\n**You may use the following variables without modifying them.**\n\n\n```r\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# | OPTIONALLY MODIFY SECTION|\n# +--------------------------+\n# define baseline variables -----------------------------------------------\n# key decision 4 **  define baseline covariates **\n# these are demographics, traits, etc. measured at baseline, that are common\n# causes of the exposure and outcome.  \n# note we will automatically include baseline measures of the exposure and outcome\n# later in the workflow.\n\nbaseline_vars <- c(\n  # demographics\n  \"age\", \"born_nz_binary\", \"education_level_coarsen\",\n  \"employed_binary\", \"eth_cat\", \"male_binary\",\n  \"not_heterosexual_binary\", \"parent_binary\", \"partner_binary\",\n  \"rural_gch_2018_l\", \"sample_frame_opt_in_binary\",\n  \n  # personality traits (excluding exposure)\n  \"agreeableness\", \"conscientiousness\", \"neuroticism\", \"openness\",\n  \n  # health and lifestyle\n  \"alcohol_frequency\", \"alcohol_intensity\", \"hlth_disability_binary\",\n  \"log_hours_children\", \"log_hours_commute\", \"log_hours_exercise\",\n  \"log_hours_housework\", \"log_household_inc\",\n  \"short_form_health\", \"smoker_binary\",\n  \n  # social and psychological\n  \"belong\", \"nz_dep2018\", \"nzsei_13_l\",\n  \"political_conservative\", \"religion_identification_level\"\n)\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n# +--------------------------+\n# |   END MODIFY SECTION     |\n# +--------------------------+\n\n```\n\n#### Five -- select baseline cohort population using eligibility criteria that are sensible for your study\n\n\n```r\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# | OPTIONALLY MODIFY SECTION|\n# +--------------------------+\n\n# select eligible participants ----------------------------------------------\n# only include participants who have exposure data at baseline\n\n# You might require tighter conditions \n# for example, if you are interested in the effects of hours of childcare, \n# you might want to select only those who were parents at baseline. \n# talk to me if you think you might night tighter eligibility criteria.\n\nids_baseline <- dat_prep |> \n  # allow missing exposure at baseline\n  # this would give us greater confidence that we generalise to the target population\n  # filter(wave == baseline_wave) |> \n  # option: do not allow missing exposure at baseline\n  # this gives us greater confidence that we recover a incident effect\n  filter(wave == baseline_wave, !is.na(!!sym(name_exposure))) |> \n  pull(id)\n\n# filter data to include only eligible participants and relevant waves\ndat_long_1 <- dat_prep |> \n  filter(id %in% ids_baseline, wave %in% all_waves) |> \n  droplevels()\n\n# +--------------------------+\n# |END OPTIONALLY MODIFY SEC.|\n# +--------------------------+\n# +--------------------------+\n# |        END ALERT         |\n# +--------------------------+\n```\n\n\n#### Six -- choose a binary cut-point\n\n\nCausal inference requires a contrast between two conditions. The splits give us the conditions of a hypothetical experiment.\n\n\n\n```r\n\n# +--------------------------+\n# |          ALERT           |\n# +--------------------------+\n# +--------------------------+\n# |    MODIFY THIS SECTION   |\n# +--------------------------+\n# define cutpoints\ncut_points = c(1, 4)\n\n# use later in positivity graph\nlower_cut <- cut_points[[1]]\nupper_cut <- cut_points[[2]]\nthreshold <- '>' # if upper\n\n# save for manuscript\nhere_save(lower_cut, \"lower_cut\")\nhere_save(upper_cut, \"upper_cut\")\nhere_save(threshold, \"threshold\")\n\n# make graph\ngraph_cut <- margot::margot_plot_categorical(\n  dat_long_exposure,\n  col_name         = name_exposure,\n  sd_multipliers = c(-1, 1), # select to suit\n  # either use n_divisions for equal-sized groups:\n  # n_divisions      = 2,\n  # or use custom_breaks for specific values:\n  custom_breaks    = cut_points,  # ** adjust as needed **\n  # could be \"lower\", no difference in this case, as no one == 4\n  cutpoint_inclusive = \"upper\",\n  show_mean        = TRUE,\n  show_median      = FALSE,\n  show_sd          = TRUE\n)\nprint(graph_cut)\n\n# save your graph\nmargot::here_save(graph_cut, \"graph_cut\", push_mods)\n```\n\nAsk: which break meaningfully separate groups into two exposure groups? Is the split *theoretically motivated**? adjust `custom_breaks` until the answer is 'yes'. then commit:\n\n\n```r\ndat_long_2 <- margot::create_ordered_variable(\n  dat_long_1,\n  var_name           = name_exposure,\n  custom_breaks      = cut_points,  # ** -- adjust based on your decision above -- **\n  cutpoint_inclusive = \"upper\"\n)s\n```\n\n\n\n#### Seven — save as you go.\n\nUse `margot::here_save()` (objects) and `here_save_qs()` (large objects) right after you create something you’ll cite in your report. The convention keeps analysis, tables, and manuscript in sync.\n\n```r\nhere_save(dat_long_final,          \"dat_long_final\")\nhere_save(percent_missing_baseline,  \"percent_missing_baseline\")\n```\n\n\n#### Remember to check the positivity assumption \n\nIs there change between `t0_` and `t1_` in the exposure variable? \n\n```r\n# create transition matrices to check positivity ----------------------------\n# this helps assess whether there are sufficient observations in all exposure states\ndt_positivity <- dat_long_final |>\n  filter(wave %in% c(baseline_wave, exposure_waves)) |>\n  select(!!sym(name_exposure), id, wave) |>\n  mutate(exposure = round(as.numeric(!!sym(name_exposure)), 0)) |>\n  # create binary exposure based on cutpoint\n  mutate(exposure_binary = ifelse(exposure > upper_cut, 1, 0)) |> # check\n  ## *-- modify this --* \n  mutate(wave = as.numeric(wave) -1 )\n\n# create transition tables\ntransition_tables <- margot::margot_transition_table(\n  dt_positivity,\n  state_var = \"exposure\",\n  id_var = \"id\",\n  waves = c(0, 1),\n  wave_var = \"wave\",\n  table_name = \"transition_table\"\n)\nprint(transition_tables$tables[[1]])\nmargot::here_save(transition_tables, \"transition_tables\", push_mods)\n\n# create binary transition tables\ntransition_tables_binary <- margot::margot_transition_table(\n  dt_positivity,\n  state_var = \"exposure_binary\",\n  id_var = \"id\",\n  waves = c(0, 1),\n  wave_var = \"wave\",\n  table_name = \"transition_table_binary\"\n)\nprint(transition_tables_binary$tables[[1]])\nmargot::here_save(transition_tables_binary, \"transition_tables_binary\", push_mods)\n\n```\n\n\n#### Take-away: Think about the hypothetical experiment you wish to perform with observational data. \n\nDecide early (exposure, cut-point, outcomes, waves), *checkpoint* everything with `here_save()`, and the rest of the pipeline flows.\n\n\n### Script 2: Prepare Final Wide Data\n\n**Purpose**  \n\nConvert the tidy long data into a grf-ready wide matrix and correct for dropout bias with inverse-probability-of-censoring weighting (IPCW).\n\n#### Step 1 – go wide automatically\n\n`margot_wide_machine()` reshapes each wave into `t0_`, `t1_`, `t2_` columns. You gave it all the names in script 1, so no new choices here. Inspect `df_wide` just to be sure the columns look sensible (baseline before exposure before outcome).\n\n\n```r\ncolnames(df_wide)\nnaniar::vis_miss(df_wide)\n```\n\n#### Step 2 – Encode + scale for algorithms\n\n`margot_process_longitudinal_data_wider()` turns factors into dummies, scales continuous variables, and appends loss-to-follow-up flags. The result is `df_wide_encoded`.  \n\nQuick sanity check: the exposure binaries should be `0/1` and their `NA`s must match the *_lost* indicators.\n\n```r\ntable(df_wide_encoded$t0_not_lost_following_wave)\n```\n\n\n#### Step 3 – Build IPCW weights*\n\nTwo probability forests estimate the chance of being observed at t1 and t2. `margot_adjust_weights()` then trims extreme values and normalises the weights. these appear as `t0_adjusted_weights` and `t1_adjusted_weights`.  The weigths should not be too extreme (e.g. values > 10)\n\n```r\nhist(df_wide_encoded$t1_adjusted_weights)\n```\n\n**Why?** observations that resemble those who dropped out are up-weighted, so estimates stay unbiased when data vanish.\n\n\n\n#### Step 4 – drop the censored \nRows with `*_lost_following_wave == 1` are removed, leaving `df_grf`. This dataset feeds the causal forest and should now have **no missing values** in any `t1_` or `t2_` column. Missingness is permitted in `t0_` columns\n\n```r\nnaniar::vis_miss(df_grf)  \n```\n\n![Graph of Missingness in Final Cleaned Dataset, time is ordered left (early) to right (late), no missing values in outcomes, missingness permitted for baseline variables](../laboratory/missing_final_data_plot.jpg){width=100%}\n\n\n#### Step 5 – checkpoint everything\n\nEach major object (`df_wide`, `df_wide_encoded`, `df_grf`, the weight vectors) is saved with `here_save()` or `here_save_qs()`. this keeps the analysis reproducible and the manuscript tables in sync.\n\n\n#### Takeaway: what you must do\n\n1. **Run the script without edits.**  \n2. skim the weight histograms; if you see huge spikes, ask for help.  \n3. confirm `df_grf` has the expected number of rows and no missing cells.\n\n\nScript 2 is a conveyor belt: long $\\to$ wide  $\\to$ weighted  $\\to$ clean. yYur only job is to eyeball the parcels before they roll into the modelling bay.\n\n\n\n### Script 3 The Analysis\n\n\n#### 1 Reproducibility scaffold  \n\n```r\nset.seed(123)                 # lock randomness  \npacman::p_load(margot, qs …)  # load every tool once  \n```\nNo choices here—just **run** and move on.\n\n\n\n#### 2 Pull in prepared objects  \n\n```r\ndf_grf           <- here_read(\"df_grf\")     # wide, weighted data  \nname_exposure    <- here_read(\"name_exposure\")  \n```\n\nIf anything is `NULL`, return to scripts 1–2 and debug.\n\n\n\n#### 3 Sanity-check with a toy forest  \n\nFit one outcome on ¼ of the data to confirm the pipeline before burning CPU hours.\n\n```r\ncf_out <- margot_causal_forest(\n  data         = df_grf[sample(nrow(df_grf), nrow(df_grf)/4), ],\n  outcome_vars = \"t2_kessler_latent_depression_z\",\n  covariates   = X,           # baseline covariates E\n  W            = W,           # exposure\n  weights      = weights\n)\nmargot_plot_policy_combo(cf_out, max_depth = 1L)\n```\n\nSuccess = a plot appears without errors.\n\n\n#### 4 Full model batches + ATE tables  \n\nLoop over the five outcome domains, saving each model to `models_example_2/`.\n\n```r\nmodels_binary <- margot_causal_forest(\n  data = df_grf,\n  outcome_vars = t2_outcome_z,\n  covariates   = X, W = W, weights = weights,\n  save_models  = TRUE, save_data = TRUE\n)\nhere_save_qs(models_binary_health, \"models_binary\")\n```\n\nThen create ATE plots and interpretations with `margot_plot()`.  Save as these go straight into the manuscript.\n\n\n\n#### 5 Heterogeneous Treatment Effects (CATE)  \n\n*Evidence phase*  \n\n-   **RATE AUTOC** & **Qini curves** via `margot_rate()` and `margot_inspect_qini()` flag outcomes with meaningful heterogeneity.  \n\n*Action phase*  \n\n-  **Flip** outcomes you want to *minimise* (e.g. depression) so positive CATE = good.  \n\n```r\n# flipping models: outcomes we want to minimise given the exposure --------\n# standard negative outcomes/  not used in this example\n# +--------------------------+\n# |    MODIFY THIS           |\n# +--------------------------+\nflip_outcomes_standard = c(\n  #\"t2_alcohol_frequency_weekly_z\",\n  #\"t2_alcohol_intensity_z\",\n  #\"t2_hlth_bmi_z\",\n  #\"t2_hlth_fatigue_z\",\n  \"t2_kessler_latent_anxiety_z\", #  ← select\n  \"t2_kessler_latent_depression_z\",#  ← select\n  \"t2_rumination_z\" #  ← select\n  #\"t2_perfectionism_z\" # the exposure variable was not investigated\n)\n\n# when exposure is negative and you want to focus on how much worse off\n# some people are use this: \n# flip_outcomes<- c( setdiff(t2_outcomes_all, flip_outcomes_standard) )\n\n# our example has the exposure as positive\nflip_outcomes <- flip_outcomes_standard\n```\n\nDon't forget to get and save the labels for these models:\n\n```r\n# get labels\nflipped_names <- margot_get_labels(flip_outcomes, label_mapping_all)\n\n# check\nflipped_names\n\n# save for publication\nhere_save(flipped_names, \"flipped_names\")\n```\n\n-  Fit **policy trees** (`margot_policy()`, `max_depth = 2L`) to discover actionable rules.  \n\n- Depth-1 trees are often trivial; depth-2 gives interpretable nuance.\n\nCheck that every split variable exists in the original data and that leaves map sensibly onto subgroups (no cells with < 30 observations).\n\n\nKey workflow is: \n\n```r\n# run the margot_policy function\n# policy tree analysis depth 2L -------------------------------------------------\n# make policy trees\n# *** 2l is much more persuasive ***\nplots_policy_trees_2L <- margot_policy(\n  models_binary_flipped_all,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  model_names = rate_interpretation_all$either_model_names,\n  # defined above\n  original_df = original_df,\n  label_mapping = label_mapping_all,\n  max_depth = 2L\n)\n\nn_models <- length(rate_interpretation_all$either_model_names)\n\nmodel_outputs_2L <- purrr::map(1:n_models, ~plots_policy_trees_2L[[.x]][[3]])\nnames(model_outputs_2L) <- paste0(\"model_\", 1:n_models)\n\n# view plots (three in this example)\nmodel_outputs_2L$model_1\nmodel_outputs_2L$model_2\nmodel_outputs_2L$model_3\n```\n\n\nYou get the interpretation with this: \n\n```r\ninterpret_plots_policy_trees_2L <- margot_interpret_policy_batch(\n  models_binary_flipped_all, model_names = rate_interpretation_all$either_model_names)\n```\n\n\nIf you were wanting to evaluate all models qualitatively, with appropriate caution you could use this code, \n**BUT** warn your audience and inspect results to see if the predictive plots capture well-defined subgroups.\n\n\n```r\n# ALL model 2L\nall_plots_policy_trees_2L <- margot_policy(\n  models_binary_flipped_all,\n  save_plots = FALSE,\n  output_dir = here::here(push_mods),\n  decision_tree_args = decision_tree_defaults,\n  policy_tree_args = policy_tree_defaults,\n  # model_names = rate_interpretation_all$either_model_names, # use all\n  # defined above\n  original_df = original_df,\n  label_mapping = label_mapping_all,\n  max_depth = 2L\n)\nn_models_all <- length(models_binary_flipped_all$results)\nn_models_all\n\nmodel_outputs_2L_all <- purrr::map(1:n_models_all, ~all_plots_policy_trees_2L[[.x]][[3]])\nnames(model_outputs_2L_all) <- paste0(\"model_\", 1:n_models_all)\n\n# view\nmodel_outputs_2L_all$model_1 # ← convincing? \nmodel_outputs_2L_all$model_2 # ← convincing? \nmodel_outputs_2L_all$model_3 # ← convincing? \nmodel_outputs_2L_all$model_4 # ← convincing? \nmodel_outputs_2L_all$model_5 # ← convincing? \nmodel_outputs_2L_all$model_6 # ← convincing? \nmodel_outputs_2L_all$model_7 # ← convincing? \nmodel_outputs_2L_all$model_8 # ← convincing? \nmodel_outputs_2L_all$model_9 # ← convincing?  \nmodel_outputs_2L_all$model_10 # ← convincing? \nmodel_outputs_2L_all$model_11 # ← convincing? \nmodel_outputs_2L_all$model_12 # ← convincing? \n\n```\n\nAnd then to interpret:\n\n```r\n# interpretation\ninterpret_plots_policy_trees_2L_all <- margot_interpret_policy_batch(models_binary_flipped_all, max_depth = 2)\n\n# view interpretation\ncat(interpret_plots_policy_trees_2L_all)\n```\n\n*Note that we do not save these outputs for the mansuscript.  We will instead re-generate the graphs and interpretations when we import results into the quarto result template.  We'll cover this part of the workflow in the remaining weeks. \n\n\n#### 6 Report subgroup analyses (optional)  \n\nWhen theory predicts effect modification—age bands, income thirds, etc.—use `margot_planned_subgroups_batch()`. The helper auto-generates tables and mini-plots; just pass the subset definitions you crafted:\n\nFirst we need to set up continitions for continuous variables, like this: \n\n```r\n# step 1 get information for wealth for conditonal comparisons\nhead(df_grf$t0_log_household_inc_z)\n\n# get mean on original data scale\nlog_mean_inc <- mean(original_df$t0_log_household_inc, na.rm = TRUE)\n\n# get sd on original data scale\nlog_sd_inc <- sd(original_df$t0_log_household_inc, na.rm = TRUE)\n\n# function to get back to data scale\nmargot_back_transform_log_z(\n  log_mean = log_mean_inc,\n  log_sd = log_sd_inc,\n  z_scores = c(-1, 0, 1),\n  label = \"data_scale\"\n)\n\n# define complex conditions for subsetting\ncomplex_condition_political <- X[, \"t0_political_conservative_z\"] > -1 &\n  X[, \"t0_political_conservative_z\"] < 1\n\ncomplex_condition_wealth <- X[, \"t0_log_household_inc_z\"] > -1 &\n  X[, \"t0_log_household_inc_z\"] < 1\n\ncomplex_condition_age <- X[, \"t0_age_z\"] > -1 &\n  X[, \"t0_age_z\"] < 1\n\n# # if we have specific groups to compare\n# complex_condition_age_under_neg_1_sd  <- X[, \"t0_age_z\"] < -1\n# complex_condition_age_gr_eq_neg_1_sd  <- X[, \"t0_age_z\"] > -1\n\n# check ages to get number\nmean(original_df$t0_age) - sd(original_df$t0_age)\nmean(original_df$t0_age) + sd(original_df$t0_age)\n\n\n# wealth subsets\nsubsets_standard_wealth <- list(\n  Poor = list(\n    var = \"t0_log_household_inc_z\",\n    value = -1,\n    operator = \"<\",\n    description = \"Effects among those HShold income < -1 SD (NZD ~41k)\",\n    label = \"Poor\"  # label remains as is, but could be changed if desired\n  ),\n  MiddleIncome = list(subset_condition = complex_condition_wealth, description = \"Effects among those HS_hold income within +/-1SD (> NZD 41k < NZD 191k)\"),\n  Rich = list(\n    var = \"t0_log_household_inc_z\",\n    value = 1,\n    operator = \">\",\n    description = \"Effects among those HS_hold income > +1 SD (NZD 191k)\",\n    label = \"Rich\"\n  )\n)\n```\n\nOr for categorical variables like this: \n\n```r\n# ethnicity subsets\nsubsets_standard_ethnicity <- list(\n  Asian = list(\n    var = \"t0_eth_cat_asian_binary\",\n    value = 1,\n    description = \"Asians\"\n  ),\n  Euro = list(\n    var = \"t0_eth_cat_euro_binary\",\n    value = 1,\n    description = \"Europeans (Pakeha)\"\n  ),\n  Pacific = list(\n    var = \"t0_eth_cat_pacific_binary\",\n    value = 1,\n    description = \"Pacific Peoples\"\n  ),\n  Maori = list(\n    var = \"t0_eth_cat_maori_binary\",\n    value = 1,\n    description = \"Māori\"\n  )\n)\n```\n\nWe set up subtypes like this: \n\n\n```r\n# set up subset types in a list\nsubset_types <- list(\n  wealth = subsets_standard_wealth,\n  ethnicity = subsets_standard_ethnicity,\n)\n\n\n# run model\nplanned_subset_results <- margot_planned_subgroups_batch(\n  domain_models = domain_models,\n  X = X,\n  base_defaults = base_defaults_binary,\n  subset_types = subset_types,\n  original_df = original_df,\n  domain_names = domain_names,\n  subtitles = subtitles\n)\n\n\n# results\ncat(planned_subset_results$wellbeing$wealth$explanation)\ncat(planned_subset_results$wellbeing$ethnicity$explanation)\n```\n\nAnd then we can carry on to graphs and tables as described in the scripts. Note that an interesting set of subgroups to investigate by 'default` are: gender/age/ethnicity. However, unless there are theoretical reasons to expect such differences we should be *very cautious* about inferring too much. \nAs we can see from the policy trees, heterogeneity doesn't unfold at our pre-defined categories, but rather in surprising ways.\n\n\n\n#### Takeaway  \n\nRun the script in order, **eyes on three checkpoints**: the toy forest plot, convincing Qini/RATE curves/interpretations, and sensible policy-tree leaves. Everything else is auto-saved for the manuscript.\n\n\n\n\n\n# Part 2: \n\n- **Sensitivity Analysis: E-values**\n- **Workflow**\n\n\n\n\n<!-- ### Modified Treatment Policies and E-values -->\n\n\n<!-- A modified treatment policy is a *flexible* intervention of the following form:  -->\n\n\n<!-- $$ -->\n<!-- \\mathbf{d}^\\lambda (a_1) = \\begin{cases} 4 & \\text{if } a_1 < 4 \\\\  -->\n<!-- a_1 & \\text{otherwise} \\end{cases} -->\n<!-- $$ -->\n<!-- $$ -->\n<!-- \\mathbf{d}^\\phi (a_1) = \\begin{cases} 0 & \\text{if } a_1 > 0 \\\\  -->\n<!-- a_1 & \\text{otherwise} \\end{cases} -->\n<!-- $$ -->\n\n<!-- $$ g' = \\text{Intervention 1 - Intervention 2} = E[Y(\\mathbf{d}^\\lambda) - Y(\\mathbf{d}^\\phi)] $$ -->\n\n<!-- $$ g'' = \\text{Intervention 1 - Intervention 2} = E[Y(\\mathbf{d}^\\lambda) - Y(\\mathbf{d}^\\phi)] $$ -->\n\n<!-- $$ -->\n<!-- {\\delta}(g) ={g'} - {g''} -->\n<!-- $$ -->\n\n\n<!-- Rather than shifting an entire population into one of two states, the estimand flexibly shifts a population according to a pre-specified function.  -->\n\n<!-- see: @hoffman2023 -->\n\n\n### Sensitivity Analysis using E-values\n\n\n> The minimum strength of association on the risk ratio scale that an unmeasured confounder would need to have with both the exposure and the outcome, conditional on the measured covariates, to fully explain away a specific exposure-outcome association\n\nSee: @mathur2018; @linden2020EVALUE; @vanderweele2017.\n\nFor example, suppose that the lower bound of the the E-value was 1.3 with the lower bound of the confidence interval = 1.12, we might then write:\n\n> With an observed risk ratio of RR=1.3, an unmeasured confounder that was associated with both the outcome and the exposure by a risk ratio of 1.3-fold each (or 30%), above and beyond the measured confounders, could explain away the estimate, but weaker joint confounder associations could not; to move the confidence interval to include the null, an unmeasured confounder that was associated with the outcome and the exposure by a risk ratio of 1.12-fold (or 12%) each could do so, but weaker joint confounder associations could not.\n\nThe equations are as follows (for risk ratios)\n\n$$\nE-value_{RR} = RR + \\sqrt{RR \\times (RR - 1)}\n$$ \n\n$$\nE-value_{LCL} = LCL + \\sqrt{LCL \\times (LCL - 1)}\n$$\n\nHere is an R function that will calculate E-values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# evalue for risk ratio\ncalculate_e_value <- function(rr, lcl) {\n  e_value_rr = rr + sqrt(rr*(rr - 1))\n  e_value_lcl = lcl + sqrt(lcl*(lcl - 1))\n  \n  list(e_value_rr = e_value_rr, e_value_lcl = e_value_lcl)\n}\n\n# e.g. smoking causes cancer\n# finding \tRR = 10.73 (95% CI: 8.02, 14.36)\nevalue_computed <- calculate_e_value(10.73, 8.02)\n\n#print\nevalue_computed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$e_value_rr\n[1] 20.94777\n\n$e_value_lcl\n[1] 15.52336\n```\n\n\n:::\n:::\n\n\nWe write:\n\n> With an observed risk ratio of RR=10.7, an unmeasured confounder that was associated 20.9477737-fold each, above and beyond the measured confounders, could explain away the estimate, but weaker joint confounder associations could not; to move the confidence interval to include the null, an unmeasured confounder that was associated with the outcome and the exposure by a risk ratio of `e_value_rr$e_value_lcl`-fold each could do so, but weaker joint confounder associations could not.\n\nNote that in this class, most of the outcomes will be (standardised) continuous outcomes. Here's a function and LaTeX code to describe the approximation.\n\nThis function takes a linear regression coefficient estimate (`est`), its standard error (`se`), the standard deviation of the outcome (`sd`), a contrast of interest in the exposure (`delta`, which defaults to 1), and a \"true\" standardized mean difference (true, which defaults to 0). It calculates the odds ratio using the formula from Chinn (2000) and VanderWeele (2017), and then uses this to calculate the E-value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#evalue for ols\ncompute_evalue_ols <- function(est, se, delta = 1, true = 0) {\n  # rescale estimate and SE to get a contrast of size delta\n  est <- est / delta\n  se <- se / delta\n\n  # compute transformed odds ratio and ci's\n  odds_ratio <- exp(0.91 * est)\n  lo <- exp(0.91 * est - 1.78 * se)\n  hi <- exp(0.91 * est + 1.78 * se)\n\n  # compute E-Values based on the RR values\n  evalue_point_estimate <- odds_ratio * sqrt(odds_ratio + 1)\n  evalue_lower_ci <- lo * sqrt(lo + 1)\n\n  # return the e-values\n  return(list(EValue_PointEstimate = evalue_point_estimate,\n              EValue_LowerCI = evalue_lower_ci))\n}\n\n\n# example:\n# suppose we have an estimate of 0.5, a standard error of 0.1, and a standard deviation of 1.\n# this would correspond to a half a standard deviation increase in the outcome per unit increase in the exposure.\nresults <- compute_evalue_ols(est = 0.5, se = 0.1, delta = 1)\npoint_round <- round(results$EValue_PointEstimate, 3)\nci_round <- round(results$EValue_LowerCI, 3)\n\n# print results\nprint(point_round)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.53\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(ci_round)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.009\n```\n\n\n:::\n:::\n\n\nWe write:\n\n> With an observed risk ratio of 2.53, an unmeasured confounder that was associated with both the outcome and the exposure by a risk ratio of 2.53-fold each, above and beyond the measured confounders, could explain away the estimate, but weaker joint confounder associations could not; to move the confidence interval to include the null, an unmeasured confounder that was associated with the outcome and the exposure by a risk ratio of 2.009-fold each could do so, but weaker joint confounder associations could not.\n\nNote the E-values package will do the computational work for us and this is what we use in the `margot` package to obtain E-values for sensitivity analysis.\n\n\n\n\n\n## Part 2 Guide For Preparing Your Study\n\n\nRecall that psychology begins with two questions. \n\n> What do I want to know about thought and behaviour? \n> What is the target population? \n\nIn cross-cultural psychology, these questions relate to differences, and similarities, between groups.\n\nSuppose we have asked a question. How can we address it using observational data?\n\nToo fast.\n\nOur question must be made precise. \n\nToday we will consider how to make psychological questions precise, and how to answer them, using 3-wave panel designs [@vanderweele2020].\n\n\n## Comprehensive Checklist for Detailed Reporting of a Causal Inferenctial Study.\n\n#### Step 1: Formulate the Research Question\n\n-   **State your question:** is my question clearly stated? If not, state it.\n-   **Relevance:** have I explained its importance? If not, explain.\n-   **Ethics** how might this question affect people? How might not investigating this question affect people? \n-   **Causality:** Is my question causal? If not, refine your question.\n-   **Heterogeneous Treatment Effects**:  Do I want to examine who responds differently (CATE)?\n-   **Subgroup analysis:** does my question involve a subgroup (e.g., cultural group)? If not, develop a subgroup analysis question.\n-   **Explain the Framework:** can I explain the causal inference framework and convey the gist to non-specialists? If not, review course materials.\n\n#### Determine Data Requirements\n\n-   **Data types:** are my data experimental? If yes, your project may not fit this course.\n-   **Time-series data:** are my data time-series? If not, reconsider your causal question.\n-   **Data waves:** do I have at least three waves of data? If not, beware of confounding control issues.\n-   **Data source:** are my data from the NZAVS simulated data set? If not, consult with me.\n\n#### Determine the Outcome\n\n-   **Outcome variable:** is the outcome variable *Y* defined? If not, define it.\n-   **Multiple outcomes:** are there multiple outcomes? If yes, explain and define them.\n-   **Outcome relevance:** can I explain how the outcome variable/s relate to my question? If not, clarify.\n-   **Outcome type:** is my outcome binary and rare? If yes, consider logistic regression. If my outcome is continuous, consider z-transforming it or categorising it (consult an expert).\n-   **Outcome timing:** does the outcome appear after the exposure? It should.\n\n#### Determine the Exposure\n\n-   **Exposure variable:** is the exposure variable *A* defined? If not, define it.\n-   **Multiple exposures:** are there multiple exposures? If yes, reassess; if only one exposure, proceed.\n-   **Exposure relevance:** can I explain how the exposure variable relates to my question? If not, clarify.\n-   **Positivity:** can we intervene on the exposure at all levels of the covariates? We should be able to.\n-   **Consistency:** can I interpret what it means to intervene on the exposure? I should be able to.\n-   **Exchangeability:** are different versions of the exposure conditionally exchangeable given measured baseline confounders? They should be.\n-   **Exposure type:** is the exposure binary or continuous?\n-   **Shift intervention**: Am I contrasting static interventions or modified treatment policies?  (Not relevant for your final report)\n-   **Exposure timing:** Does the exposure appear before the outcome? It should.\n\n#### Account for Confounders\n\n-   **Baseline confounders:** Have I defined my baseline confounders *L*? I should have.\n-   **Justification:** Can I explain how the baseline confounders could affect both *A* and *Y*? I should be able to.\n-   **Timing:** Are the baseline confounders measured before the exposure? They should be.\n-   **Inclusion:** Is the baseline measure of the exposure and the baseline outcome included in the set of baseline confounders? They should be.\n-   **Sufficiency:** Are the baseline confounders sufficient to ensure balance on the exposure, such that *A* is independent of *Y* given *L*? If not, plan a sensitivity analysis.\n-   **Confounder type:** Are the confounders continuous or binary? If so, consider converting them to z-scores. If they are categorical with three or more levels, do not convert them to z-scores.\n\n#### Draw a Causal Diagram with Unmeasured Confounders\n\n-   **Unmeasured confounders:** Does previous science suggest the presence of unmeasured confounders? If not, expand your understanding.\n-   **Causal diagram:** Have I drawn a causal diagram (DAG) to highlight both measured and unmeasured sources of confounding? I should have.\n-   **Measurement error:** Have I described potential biases from measurement errors? If not, we'll discuss later.\n-   **Temporal order:** Does my DAG have time indicators to ensure correct temporal order? It should.\n-   **Time consistency:** Is my DAG organized so that time follows in a consistent direction? It should.\n\n#### Identify the Estimand\n\n- ATE or CATE or both? (For you -- it will be both)\n\n#### Understanding Source and Target Populations\n\n-   **Populations identified:** Have I explained how my sample relates to my target populations? I should have.\n-   **Generalisability and transportability:** Have I considered whether my results generalise different populations?  I should have.\n\n#### Set Eligibility Criteria\n\n-   **Criteria stated:** Have I stated the eligibility criteria for the study? I should have.\n\n#### Describe Sample Characteristics\n\n-   **Descriptive statistics:** have I provided descriptive statistics for demographic information taken at baseline? I should have.\n-   **Exposure change:** Have I demonstrated the magnitudes of change in the exposure from baseline to the exposure interval? I should have.\n-   **References:** Have I included references for more information about the sample? I should have.\n\n#### Addressing Missing Data\n\n-   **Missing data checks:** Have I checked for missing data? I should have.\n-   **Missing data plan:** If there is missing data, have I described how I will address it? I should have.\n\n#### Selecting the Model Approach: If Not Using Machine Learning (Lecture 7)\n\n-   **Approach decision:** Have I decided on using G-computation, IPTW, or Doubly-Robust Estimation? I should have.\n-   **Interactions:** If not using machine learning, have I included the interaction of the exposure and baseline covariates? I should have.\n-   **Big data:** If I have a large data set, should I include the interaction of the exposure, group, and baseline confounders? I should consider it.\n-   **Model specification:** have I double-checked the model specification? I should.\n-   **Outcome assessment:** If the outcome is rare and binary, have I specified logistic regression? If it's continuous, have I considered converting it to z-scores?\n-   **Sensitivity analysis:** am I planning a sensitivity analysis using simulation? If yes, describe it (e.g. E-values.)\n\n#### Machine Learing\n\nHave I explained how causal forests work (next week's lecture).\n\n### Clarify unmeasured pre-treatment covariates\n\nLet **U** denoted unmeasured pre-treatment covariates that may potentially bias the statistical association between *A* and *Y* independently of the measured covariates.\n\n#### Consider:\n\n-   To affect *Y* and *A*, *U* must occur before *A*.\n-   It is useful to draw a causal diagramme to illustrate all potential sources of bias.\n-   Causal diagrammes are qualitative tools that require specialist expertise. We cannot typically obtain a causal graph from the data.\n-   A causal diagramme should include only as much information as is required to assess confounding. See @fig-dag-outcomewide for an example.\n-   Because we cannot ensure the absence of unmeasured confounders in observational settings, it is vital to conduct sensitivity analyses for the results. For sensitivity analyeses, we use E-values.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Causal graph: three-wave panel design.](09-content_files/figure-html/fig-dag-outcomewide-1.png){#fig-dag-outcomewide width=100%}\n:::\n:::\n\n\n### Choose the scale for a causal contrast\n\nDifference/ Risk ratio? \n\n#### Consider:\n\n-   *In this course, we are interested in stratum specific comparisons*\n-   In the causal inference literature, the concept we use to make sense of stratum specific comparisons is called \"effect modification.\"\n-   By inferring effects within strata, we may evaluate whether the effects of different exposures or treatments on some well-defined outcome (measured in some well-defined time-period after the exposure) differ depending on group measurement.\n-   The logic of effect modification differs slightly from that of interaction.\n\n#### Aside: extensions\n\nFor continuous exposures, we must stipulate the level of contrast for the exposure (e.g. weekly versus monthly church attendance):\n\n$$ATE_{A,A'} = E[Y(A) - Y(A')| L]$$\n\nThis essentially denotes an average treatment effect comparing the outcome under treatment level $A$ to the outcome under treatment level $A'$.\n\nLikewise:\n\n$$ATE_{A/A'} = \\frac{E[Y(A)| L]}{E[Y(A')| L]}$$\n\nThis defines the contrast of $A$ and $A'$ on a ratio scale.\n\n#### Describe the population(s) for whom the intended study is meant to generalise by distinguishing between source and target populations.\n\nConsider the following concepts:\n\n-   **Source population**: a source population is where we gather our data for a study. We pull our specific sample from this group. It needs to mirror the broader group for our conclusions to be valid and widely applicable.\n\n-   **Target population**: the target population is the larger group we aim to apply our study's results to. It could be defined by location, demographics, or specific conditions. The closer the source matches the target in ways that are relevant to our causal questions, the stronger our causal inferences about the target population will be.\n\n    -   **Generalisability** refers to the ability to apply the causal effects estimated from a sample to the population it was drawn from. In simpler terms, it deals with the extrapolation of causal knowledge from a sample to the broader population. This concept is also called \"external validity\".\n\n$$\\text{Generalisability} = PATE \\approx ATE_{\\text{sample}}$$\n\n-   **Transportability** refers to the ability to extrapolate causal effects learned from a source population to a target population when certain conditions are met. It deals with the transfer of causal knowledge across different settings or populations.\n\n$$\\text{Transportability} = ATE_{\\text{target}} \\approx f(ATE_{\\text{source}}, T)$$\n\nwhere $f$ is a function and $T$ is a function that maps the results from our source population to another population. To achieve transportability, we need information about the source and target populations and an understanding of how the relationships between treatment, outcome, and covariates differ between the populations. Assessing transportability requires scientific knowledge.\n\n### Summary Step 1: Consider how much we need to do when asking a causal question!\n\nWe discover that asking a causal question is a multifaceted task. It demands careful definition of the outcome, including its timing, the exposure, and covariates. It also requires selecting the appropriate scale for causal contrast, controlling for confounding, and potentially adjusting for sample weights or stratification. Finally, when asking a causal question, we must consider for whom the results apply. Only after following these steps can we then ask: \"How may we answer this causal question?\"\n\n## STEP 2: Answer Your Question\n\n#### Obtain longitudinal data\n\nNote that causal inference from observational data turns on the appropriate temporal ordering of the key variables involved in the study.\n\nRecall we have defined.\n\n-   **A**: Our exposure or treatment variable, denoted as **A**. Here we consider the example of 'Church attendance'.\n\n-   **Y**: The outcome variable we are interested in, represented by **Y**, is psychological distress. We operationalise this variable through the 'Kessler-6' distress scale.\n\n-   **L**: The confounding variables, collectively referred to as **L**, represent factors that can independently influence both **A** and **Y**. For example, socio-economic status could be a confounder that impacts both the likelihood of church attendance and the levels of psychological distress.\n\nGiven the importance of temporal ordering, we must now define time:\n\n-   **t** $\\in$ T: Let $t$ denote within a multiwave panel study with **T** measurement intervals.\n\nWhere $t/\\text{{exposure}}$ denotes the measurement interval for the exposure. Longitudinal data collection provides us the ability to establish a causal model such that:\n\n$$t_{confounders} < t_{exposure}< t_{outcome}$$\n\nTo minimise the posibility of time-varying confounding and obtain the clearest effect estimates, we should acquire the most recent values of $\\mathbf{L}$ preceding $A$ and the latest values of $A$ before $Y$.\n\nNote in @fig-dag-outcomewide, We use the prefixes \"t0, t1, and t2\" to denote temporal ordering. We include in the set of baseline confounders the pre-exposure measurement of *A* and *Y*. This allows for more substantial confounding control. For unmeasured confounder to affect both the exposure and the outcome, it would need to do so independently of the pre-exposure confounders. Additionally, including the baseline exposure gives us an effect estimate for the incidence exposure, rather than the prevelance of the exposure. This helps us to assess the expected change in the outcome were we to initate a change in the exposure.\n\n### Include the measured exposure with baseline covariates\n\nControlling for prior exposure enables the interpretation of the effect estimate as a change in the exposure in a manner akin to a randomised trial. We propose that the effect estimate with prior control for the exposure estimates the \"incidence exposure\" rather than the \"prevalence exposure\" [@danaei2012]. It is crucial to estimate the incidence exposure because if the effects of an exposure are harmful in the short term such that these effects are not subsequently measured, a failure to adjust for prior exposure will yield the illusion that the exposure is beneficial. Furthermore, this approach aids in controlling for unmeasured confounding. For such a confounder to explain away the observed exposure-outcome association, it would need to do so independently of the prior level of the exposure and outcome.\n\n### State the eligibility criteria for participation\n\nThis step is invaluable for assessing whether we are answering the causal question that we have asked.\n\n#### Consider:\n\n-   Generalisability: we cannot evaluate inferences to a target group from the source population if we do not describe the source population\n-   Eligibility criteria will help us to ensure whether we have correctly evaluated potential measurement bias/error in our instruments.\n\nFor example, the New Zealand Attitudes and Values Study is a National Probability study of New Zealanders. The details provided in the supplementary materials describe how individuals were randomly selected from the country's electoral roll. From these invitations there was typically less than 15% response rate. How might this process of recruitment affect generalisability and transportability of our results?\n\n-   Aside: discuss per protocol effects/ intention to treat effects\n\n### Determine how missing data will be handled\n\n-   As we will consider in the upcoming weeks, loss to follow up and non-response opens sources for bias. We must develop a strategy for handling missing data.\n\n### State a statistical model\n\nThe models we have considered in this course are G-computation, Inverse Probability of Treatement Weighting, and Doubly-Robust estimation.\n\n### Reporting\n\nConsider the following ideas about how to report one's model:\n\n-   **Estimator**: Doubly robust where possible.\n-   **Propensity Score Reporting:** Detail the process of propensity score derivation, including the model used and any variable transformations.\n-   **WeightIt Package:** Explicitly mention the use of the 'WeightIt' package in R, including any specific options or parameters used in the propensity score estimation process.\n-   **Method Variations:** Report if different methods were used to obtain propensity scores, and the reasons behind the choice of methods such as 'ebal', 'energy', and 'ps'.\n-   **Continuous Exposures:** Highlight that for continuous exposures, only the 'energy' option was used for propensity score estimation. (not relevant for your report)\n-  **Binary Exposure** Justify your cutpoints by referencing theory/existing knowledge *in advance* of conducting the analysis.\n-   **Subgroup Estimation:** Confirm that the propensity scores for subgroups were estimated separately, and discuss how the weights were subsequently combined with the original data.\n-   **Covariate Balance:** Include a Love plot to visually represent covariate balance on the exposure both before and after weighting.\n-   **Weighting Algorithm Statistics:** Report the statistics for the weighting algorithms as provided by the WeightIt package, including any measures of balance or fit.\n-   **Outcome Regression Model:** Clearly report the type of regression model used to estimate outcome model coefficients (e.g., linear regression, Poisson, binomial), and mention if the exposure was interacted with the baseline covariates. Do not report model coefficients as these have no interpretation.\n-   **Subgroup Interaction:** Address whether the subgroup was included separately as an interaction in the outcome model, and if the model successfully converged.\n-   **Machine Learning Using `lmtp`** If using the `lmtp` package, do a stratified analysis. (see today's lab)\n-   **Model coefficients:** note that the model coefficients should not be interpreted, as they are not meaningful in this context.\n-   **Confidence intervals and standard errors:** Describe the methods used to derive confidence intervals and standard errors, noting the use of the 'clarify' package in R for simulation based inference.\n\n### Example of how to report a doubly robust method in your report\n\nThe Doubly Robust Estimation method for Subgroup Analysis Estimator is a sophisticated tool combining features of both IPTW and G-computation methods, providing unbiased estimates if either the propensity score or outcome model is correctly specified. The process involves five main steps:\n\n**Step 1** involves the estimation of the propensity score, a measure of the conditional probability of exposure given the covariates and the subgroup indicator. This score is calculated using statistical models such as logistic regression, with the model choice depending on the nature of the data and exposure. Weights for each individual are then calculated using this propensity score. These weights depend on the exposure status and are computed differently for exposed and unexposed individuals. The estimation of propensity scores is performed separately within each subgroup stratum.\n\n**Step 2** focuses on fitting a weighted outcome model, making use of the previously calculated weights from the propensity scores. This model estimates the outcome conditional on exposure, covariates, and subgroup, integrating the weights into the estimation process. Unlike in propensity score model estimation, covariates are included as variables in the outcome model. This inclusion makes the method doubly robust - providing a consistent effect estimate if either the propensity score or the outcome model is correctly specified, thereby reducing the assumption of correct model specification.\n\n**Step 3** entails the simulation of potential outcomes for each individual in each subgroup. These hypothetical scenarios assume universal exposure to the intervention within each subgroup, regardless of actual exposure levels. The expectation of potential outcomes is calculated for each individual in each subgroup, using individual-specific weights. These scenarios are performed for both the current and alternative interventions.\n\n**Step 4** is the estimation of the average causal effect for each subgroup, achieved by comparing the computed expected values of potential outcomes under each intervention level. The difference represents the average causal effect of changing the exposure within each subgroup. \n\n**Step 5** involves comparing differences in causal effects across groups by calculating the differences in the estimated causal effects between different subgroups. Confidence intervals and standard errors for these calculations are determined using simulation-based inference methods [@greifer2023]. This step allows for a comprehensive comparison of the impact of different interventions across various subgroups, while encorporating uncertainty.\n\n### Inference\n\nConsider the following ideas about what to discuss in one's findings:\nConsider the following ideas about what to discuss in one's findings. The order of exposition might be different.\n\n1.  **Summary of results**:  What did you find?\n\n2. **Interpretation of E-values:** Interpret the E-values used for sensitivity analysis. State what they represent in terms of the robustness of the findings to potential unmeasured confounding.\n\n3.  **Causal Effect Interpretation:** What is the interest of the effect, if any, if an effect was observed? Interpret the average causal effect of changing the exposure level within each subgroup, and discuss its relevance to the research question. \n\n4.  **Comparison of Subgroups:** Discuss how differences in causal effect estimates between different subgroups, if observed, or if not observed, contribute to the overall findings of the study.\n\n5.  **Uncertainty and Confidence Intervals:** Consider the uncertainty around the estimated causal effects, and interpret the confidence intervals to understand the precision of the estimates.\n\n6.  **Generalisability and Transportability:** Reflect on the generalizability of the study results to other contexts or populations. Discuss any factors that might influence the transportability of the causal effects found in the study. (Again see lecture 9.)\n\n7.  **Assumptions and Limitations:** Reflect on the assumptions made during the study and identify any limitations in the methodology that could affect the interpretation of results. State that the implications of different intervention levels on potential outcomes are not analysed. \n\n8.  **Theoretical Relevance**: How are these findings relevant to existing theories. \n\n9.  **Replication and Future Research:** Consider how the study could be replicated or expanded upon in future research, and how the findings contribute to the existing body of knowledge in the field.\n\n10. **Real-world Implications:** Discuss the real-world implications of the findings, and how they could be applied in policy, practice, or further research.\n\n\n## Appendix A: Details of Estimation Approaches\n\n### G-computation for Subgroup Analysis Estimator\n\n**Step 1:** Estimate the outcome model. Fit a model for the outcome $Y$, conditional on the exposure $A$, the covariates $L$, and subgroup indicator $G$. This model can be a linear regression, logistic regression, or another statistical model. The goal is to capture the relationship between the outcome, exposure, confounders, and subgroups.\n\n$$ \\hat{E}(Y|A,L,G) = f_Y(A,L,G; \\theta_Y) $$\n\nThis equation represents the expected value of the outcome $Y$ given the exposure $A$, covariates $L$, and subgroup $G$, as modelled by the function $f_Y$ with parameters $\\theta_Y$. This formulation allows for the prediction of the average outcome $Y$ given certain values of $A$, $L$, and $G$.\n\n**Step 2:** Simulate potential outcomes. For each individual in each subgroup, predict their potential outcome under the intervention $A=a$ using the estimated outcome model:\n\n$$\\hat{E}(Y(a)|G=g) = \\hat{E}[Y|A=a,L,G=g; \\hat{\\theta}_Y]$$\n\nWe also predict the potential outcome for everyone in each subgroup under the causal contrast, setting the intervention for everyone in that group to $A=a'$:\n\n$$\\hat{E}(Y(a')|G=g) = \\hat{E}[Y|A=a',L,G=g; \\hat{\\theta}_Y]$$\n\nIn these equations, $Y$ represents the potential outcome, $A$ is the intervention, $L$ are the covariates, $G=g$ represents the subgroup, and $\\theta_Y$ are the parameters of the outcome model.\n\n**Step 3:** Calculate the estimated difference for each subgroup $g$:\n\n$$\\hat{\\delta}_g = \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a')|G=g]$$\n\nThis difference $\\hat{\\delta}_g$ represents the average causal effect of changing the exposure from level $a'$ to level $a$ within each subgroup $g$.\n\nWe use simulation-based inference methods to compute standard errors and confidence intervals [@greifer2023].\n\n**Step 4:** Compare differences in causal effects by subgroups:\n\n$$\\hat{\\gamma} = \\hat{\\delta}_g - \\hat{\\delta}_{g'}$$\n\nwhere,\n\n$$\\hat{\\gamma} = \\overbrace{\\big( \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a^{\\prime})|G=g] \\big)}^{\\hat{\\delta_g}} - \\overbrace{\\big(\\hat{E}[Y(a^{\\prime})|G=g^{\\prime}]- \\hat{E}[Y(a)|G=g^{\\prime}]\\big)}^{\\hat{\\delta_{g^{\\prime}}}}$$\n\nThis difference $\\hat{\\gamma}$ represents the difference in the average causal effects between the subgroups $g$ and $g'$. It measures the difference in effect of the exposure $A$ within subgroup $G$ on the outcome $Y$.\n\n\n[^note_care] \n\n[^note_care]: $A$ and $G$ on $Y$ might not be additive. We assume that the potential confounders $L$ are sufficient to control for confounding. See Appendix\n\n\nWe again use simulation-based inference methods to compute standard errors and confidence intervals [@greifer2023].\n\n\n\n\n### Inverse Probability of Treatment Weighting (IPTW) for Subgroup Analysis Estimator\n\n\n**Step 1:** Estimate the propensity score. The propensity score $e(L, G)$ is the conditional probability of the exposure $A = 1$, given the covariates $L$ and subgroup indicator $G$. This can be modeled using logistic regression or other suitable methods, depending on the nature of the data and the exposure.\n\n$$\\hat{e} = P(A = 1 | L, G) = f_A(L, G; \\theta_A)$$\n\nHere, $f_A(L, G; \\theta_A)$ is a function (statistical model) that estimates the probability of the exposure $A = 1$ given covariates $L$ and subgroup $G$. Then, we calculate the weights for each individual, denoted as $v$, using the estimated propensity score:\n\n$$\nv = \n\\begin{cases} \n\\frac{1}{\\hat{e}} & \\text{if } A = 1 \\\\\n\\frac{1}{1-\\hat{e}} & \\text{if } A = 0 \n\\end{cases}\n$$\n\n**Step 2:** Fit a weighted outcome model. Using the weights calculated from the estimated propensity scores, fit a model for the outcome $Y$, conditional on the exposure $A$ and subgroup $G$. This can be represented as:\n\n$$ \\hat{E}(Y|A, G; V) = f_Y(A, G ; \\theta_Y, V) $$\n\nIn this model, $f_Y$ is a function (such as a weighted regression model) with parameters $θ_Y$.\n\n**Step 3:** Simulate potential outcomes. For each individual in each subgroup, simulate their potential outcome under the hypothetical scenario where everyone in the subgroup is exposed to the intervention $A=a$ regardless of their actual exposure level:\n\n$$\\hat{E}(Y(a)|G=g) = \\hat{E}[Y|A=a,G=g; \\hat{\\theta}_Y, v]$$\n\nAnd also under the hypothetical scenario where everyone is exposed to intervention $A=a'$:\n\n$$\\hat{E}(Y(a')|G=g) = \\hat{E}[Y|A=a',G=g; \\hat{\\theta}_Y, v]$$\n\n**Step 4:** Estimate the average causal effect for each subgroup as the difference in the predicted outcomes:\n\n$$\\hat{\\delta}_g = \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a')|G=g]$$\n\nThe estimated difference $\\hat{\\delta}_g$ represents the average causal effect within group $g$.\n\n**Step 5:** Compare differences in causal effects by groups. Compute the differences in the estimated causal effects between different subgroups:\n\n$$\\hat{\\gamma} = \\hat{\\delta}_g - \\hat{\\delta}_{g'}$$\n\nwhere,\n\n$$\\hat{\\gamma} = \\overbrace{\\big( \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a')|G=g] \\big)}^{\\hat{\\delta_g}} - \\overbrace{\\big(\\hat{E}[Y(a')|G=g']- \\hat{E}[Y(a)|G=g']\\big)}^{\\hat{\\delta_{g'}}}$$\n\nThis $\\hat{\\gamma}$ represents the difference in the average causal effects between the subgroups $g$ and $g'$.\n\n\nWe again use simulation-based inference methods to compute standard errors and confidence intervals [@greifer2023].\n\n\n### Doubly Robust Estimation for Subgroup Analysis Estimator\nIt appears that the Doubly Robust Estimation explanation for subgroup analysis is already clear and correct, covering all the necessary steps in the process. Nevertheless, there's a slight confusion in step 4. The difference $\\delta_g$ is not defined within the document. I assume that you intended to write $\\hat{\\delta}_g$. Here's the corrected version:\n\n### Doubly Robust Estimation for Subgroup Analysis Estimator\n\nDoubly Robust Estimation is a powerful technique that combines the strengths of both the IPTW and G-computation methods. It uses both the propensity score model and the outcome model, which makes it doubly robust: it produces unbiased estimates if either one of the models is correctly specified.\n\n**Step 1** Estimate the propensity score. The propensity score $\\hat{e}(L, G)$ is the conditional probability of the exposure $A = 1$, given the covariates $L$ and subgroup indicator $G$. This can be modeled using logistic regression or other suitable methods, depending on the nature of the data and the exposure.\n\n$$\\hat{e} = P(A = 1 | L, G) = f_A(L, G; \\theta_A)$$\n\nHere, $f_A(L, G; \\theta_A)$ is a function (statistical model) that estimates the probability of the exposure $A = 1$ given covariates $L$ and subgroup $G$. Then, we calculate the weights for each individual, denoted as $v$, using the estimated propensity score:\n\n$$\nv = \n\\begin{cases} \n\\frac{1}{\\hat{e}} & \\text{if } A = 1 \\\\\n\\frac{1}{1-\\hat{e}} & \\text{if } A = 0 \n\\end{cases}\n$$\n\n**Step 2** Fit a weighted outcome model. Using the weights calculated from the estimated propensity scores, fit a model for the outcome $Y$, conditional on the exposure $A$, covariates $L$, and subgroup $G$.\n\n$$ \\hat{E}(Y|A, L, G; V) = f_Y(A, L, G ; \\theta_Y, V) $$\n\n**Step 3** For each individual in each subgroup, simulate their potential outcome under the hypothetical scenario where everyone in the subgroup is exposed to the intervention $A=a$ regardless of their actual exposure level:\n\n$$\\hat{E}(Y(a)|G=g) = \\hat{E}[Y|A=a,G=g; L,\\hat{\\theta}_Y, v]$$\n\nAnd also under the hypothetical scenario where everyone in each subgroup is exposed to intervention $A=a'$:\n\n$$\\hat{E}(Y(a')|G=g) = \\hat{E}[Y|A=a',G=g; L; \\hat{\\theta}_Y, v]$$\n\n**Step 4** Estimate the average causal effect for each subgroup. Compute the estimated expected value of the potential outcomes under each intervention level for each subgroup:\n\n$$\\hat{\\delta}_g = \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a')|G=g]$$\n\nThe estimated difference $\\hat{\\delta}_g$ represents the average causal effect of changing the exposure from level $a'$ to level $a$ within each subgroup.\n\n**Step 5** Compare differences in causal effects by groups. Compute the differences in the estimated causal effects between different subgroups:\n\n$$\\hat{\\gamma} = \\hat{\\delta}_g - \\hat{\\delta}_{g'}$$\n\nwhere,\n\n$$\\hat{\\gamma} = \\overbrace{\\big( \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a')|G=g] \\big)}^{\\hat{\\delta_g}} - \\overbrace{\\big(\\hat{E}[Y(a')|G=g']- \\hat{E}[Y(a)|G=g']\\big)}^{\\hat{\\delta_{g'}}}$$\n\n\nWe again use simulation-based inference methods to compute standard errors and confidence intervals [@greifer2023].\n\n\n## Appendix B: G-computation for Subgroup Analysis Estimator with Non-Additive Effects\n\n**Step 1:** Estimate the outcome model. Fit a model for the outcome $Y$, conditional on the exposure $A$, the covariates $L$, subgroup indicator $G$, and interactions between $A$ and $G$. This model can be a linear regression, logistic regression, or another statistical model. The goal is to capture the relationship between the outcome, exposure, confounders, subgroups, and their interactions.\n\n$$ \\hat{E}(Y|A,L,G,AG) = f_Y(A,L,G,AG; \\theta_Y) $$\n\nThis equation represents the expected value of the outcome $Y$ given the exposure $A$, covariates $L$, subgroup $G$, and interaction term $AG$, as modeled by the function $f_Y$ with parameters $\\theta_Y$. \n\n**Step 2:** Simulate potential outcomes. For each individual in each subgroup, predict their potential outcome under the intervention $A=a$ using the estimated outcome model:\n\n$$\\hat{E}(Y(a)|G=g) = \\hat{E}[Y|A=a,L,G=g,AG=ag; \\hat{\\theta}_Y]$$\n\nWe also predict the potential outcome for everyone in each subgroup under the causal contrast, setting the intervention for everyone in that group to $A=a'$:\n\n$$\\hat{E}(Y(a')|G=g) = \\hat{E}[Y|A=a',L,G=g,AG=a'g; \\hat{\\theta}_Y]$$\n\n**Step 3:** Calculate the estimated difference for each subgroup $g$:\n\n$$\\hat{\\delta}_g = \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a')|G=g]$$\n\n**Step 4:** Compare differences in causal effects by subgroups:\n\n$$\\hat{\\gamma} = \\hat{\\delta}_g - \\hat{\\delta}_{g'}$$\n\nwhere,\n\n$$\\hat{\\gamma} = \\overbrace{\\big( \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a^{\\prime})|G=g] \\big)}^{\\hat{\\delta_g}} - \\overbrace{\\big(\\hat{E}[Y(a^{\\prime})|G=g^{\\prime}]- \\hat{E}[Y(a)|G=g^{\\prime}]\\big)}^{\\hat{\\delta_{g^{\\prime}}}}$$\n\nThis difference $\\hat{\\gamma}$ represents the difference in the average causal effects between the subgroups $g$ and $g'$, taking into account the interaction effect of the exposure $A$ and the subgroup $G$ on the outcome $Y$.\n\nNote that the interaction term $AG$ (or $ag$ and $a'g$ in the potential outcomes) stands for the interaction between the exposure level and the subgroup. This term is necessary to accommodate the non-additive effects in the model. As before, we must ensure that potential confounders $L$ are sufficient to control for confounding. \n\n## Appendix C: Doubly Robust Estimation for Subgroup Analysis Estimator with Interaction\n\nAgain, Doubly Robust Estimation combines the strengths of both the IPTW and G-computation methods. It uses both the propensity score model and the outcome model, which makes it doubly robust: it produces unbiased estimates if either one of the models is correctly specified.\n\n**Step 1** Estimate the propensity score. The propensity score $e(L, G)$ is the conditional probability of the exposure $A = 1$, given the covariates $L$ and subgroup indicator $G$. This can be modeled using logistic regression or other suitable methods, depending on the nature of the data and the exposure.\n\n$$e = P(A = 1 | L, G) = f_A(L, G; \\theta_A)$$\n\nHere, $f_A(L, G; \\theta_A)$ is a function (statistical model) that estimates the probability of the exposure $A = 1$ given covariates $L$ and subgroup $G$. Then, we calculate the weights for each individual, denoted as $v$, using the estimated propensity score:\n\n$$\nv = \n\\begin{cases} \n\\frac{1}{\\hat{e}} & \\text{if } A = 1 \\\\\n\\frac{1}{1-\\hat{e}} & \\text{if } A = 0 \n\\end{cases}\n$$\n\n**Step 2** Fit a weighted outcome model. Using the weights calculated from the estimated propensity scores, fit a model for the outcome $Y$, conditional on the exposure $A$, covariates $L$, subgroup $G$ and the interaction between $A$ and $G$.\n\n$$ \\hat{E}(Y|A, L, G, AG; V) = f_Y(A, L, G, AG ; \\theta_Y, V) $$\n\n**Step 3** For each individual in each subgroup, simulate their potential outcome under the hypothetical scenario where everyone in the subgroup is exposed to the intervention $A=a$ regardless of their actual exposure level:\n\n$$\\hat{E}(Y(a)|G=g) = \\hat{E}[Y|A=a,G=g, AG=ag; L,\\hat{\\theta}_Y, v]$$\n\nAnd also under the hypothetical scenario where everyone in each subgroup is exposed to intervention $A=a'$:\n\n$$\\hat{E}(Y(a')|G=g) = \\hat{E}[Y|A=a',G=g, AG=a'g; L; \\hat{\\theta}_Y, v]$$\n\n**Step 4** Estimate the average causal effect for each subgroup. Compute the estimated expected value of the potential outcomes under each intervention level for each subgroup:\n\n$$\\hat{\\delta}_g = \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a')|G=g]$$\n\nThe estimated difference $\\hat{\\delta}_g$ represents the average causal effect of changing the exposure from level $a'$ to level $a$ within each subgroup.\n\n**Step 5** Compare differences in causal effects by groups. Compute the differences in the estimated causal effects between different subgroups:\n\n$$\\hat{\\gamma} = \\hat{\\delta}_g - \\hat{\\delta}_{g'}$$\n\nwhere,\n\n$$\\hat{\\gamma} = \\overbrace{\\big( \\hat{E}[Y(a)|G=g] - \\hat{E}[Y(a')|G=g] \\big)}^{\\hat{\\delta_g}} - \\overbrace{\\big(\\hat{E}[Y(a')|G=g']- \\hat{E}[Y(a)|G=g']\\big)}^{\\hat{\\delta_{g'}}}$$\n\nWe again use simulation-based inference methods to compute standard errors and confidence intervals [@greifer2023].\n\n\n\n## Appendix D: Marginal Structural Models for Estimating Population Average Treatment Effect with Interaction (Doubly Robust)\n\n\nSometimes we will only wish to estimate a marginal effect. In that case.\n\n**Step 1** Estimate the propensity score. The propensity score $e(L)$ is the conditional probability of the exposure $A = 1$, given the covariates $L$ which contains the subgroup $G$. This can be modelled using logistic regression or other functions as described in @greifer2023\n\n$$\\hat{e} = P(A = 1 | L) = f_A(L; \\theta_A)$$\n\nHere, $f_A(L; \\theta_A)$ is a function (a statistical model) that estimates the probability of the exposure $A = 1$ given covariates $L$. Then, we calculate the weights for each individual, denoted as $v$, using the estimated propensity score:\n\n$$\nv = \n\\begin{cases} \n\\frac{1}{e} & \\text{if } A = 1 \\\\\n\\frac{1}{1-e} & \\text{if } A = 0 \n\\end{cases}\n$$\n\n**Step 2** Fit a weighted outcome model. Using the weights calculated from the estimated propensity scores, fit a model for the outcome $Y$, conditional on the exposure $A$ and covariates $L$.\n\n$$ \\hat{E}(Y|A, L; V) = f_Y(A, L; \\theta_Y, V) $$\n\nThis model should include terms for both the main effects of $A$ and $L$ and their interaction $AL$.\n\n**Step 3** For the entire population, simulate the potential outcome under the hypothetical scenario where everyone is exposed to the intervention $A=a$ regardless of their actual exposure level:\n\n$$\\hat{E}(Y(a)) = \\hat{E}[Y|A=a; L,\\hat{\\theta}_Y, v]$$\n\nAnd also under the hypothetical scenario where everyone is exposed to intervention $A=a'$:\n\n$$\\hat{E}(Y(a')) = \\hat{E}[Y|A=a'; L; \\hat{\\theta}_Y, v]$$\n\n**Step 4** Estimate the average causal effect for the entire population. Compute the estimated expected value of the potential outcomes under each intervention level for the entire population:\n\n$$\\hat{\\delta} = \\hat{E}[Y(a)] - \\hat{E}[Y(a')]$$\n\nThe estimated difference $\\hat{\\delta}$ represents the average causal effect of changing the exposure from level $a'$ to level $a$ in the entire population.\n\nWe again use simulation-based inference methods to compute standard errors and confidence intervals [@greifer2023].\n\n\n### Machine Learning\n\nExample from https://osf.io/cnphs\n\n\n> We perform statistical estimation using semi-parametric Targeted\nLearning, specifically a Targeted Minimum Loss-based Estimation (TMLE)\nestimator. TMLE is a robust method that combines machine learning\ntechniques with traditional statistical models to estimate causal\neffects while providing valid statistical uncertainty measures for these\nestimates [@van2012targeted; @van2014targeted].\n\n> TMLE operates through a two-step process that involves modelling both\nthe outcome and treatment (exposure). Initially, TMLE employs machine\nlearning algorithms to flexibly model the relationship between\ntreatments, covariates, and outcomes. This flexibility allows TMLE to\naccount for complex, high-dimensional covariate spaces\n\\emph{efficiently} without imposing restrictive model assumptions;\n[@vanderlaan2011; @vanderlaan2018]. The outcome of this step is a set\nof initial estimates for these relationships.\n\n> The second step of TMLE involves ``targeting'' these initial estimates\nby incorporating information about the observed data distribution to\nimprove the accuracy of the causal effect estimate. TMLE achieves this\nprecision through an iterative updating process, which adjusts the\ninitial estimates towards the true causal effect. This updating process\nis guided by the efficient influence function, ensuring that the final\nTMLE estimate is as close as possible, given the measures and data, to\nthe targeted causal effect while still being robust to\nmodel-misspecification in either the outcome or the treatment model\n[@van2014discussion].\n\n> Again, a central feature of TMLE is its double-robustness property. If\neither the treatment model or the outcome model is correctly specified,\nthe TMLE estimator will consistently estimate the causal effect.\nAdditionally, we used cross-validation to avoid over-fitting, following\nthe pre-stated protocols in Bulbulia [@bulbulia2024PRACTICAL]. The integration of TMLE\nand machine learning technologies reduces the dependence on restrictive\nmodelling assumptions and introduces an additional layer of robustness.\nFor further details of the specific targeted learning strategy we\nfavour, see [@duxedaz2021; @hoffman2022, @hoffman2023]. We perform estimation using the\n\\texttt{lmtp} package [@williams2021]. We used the \\texttt{superlearner} library for semi-parametric estimation with the predefined libraries \\texttt{SL.ranger},\n\\texttt{SL.glmnet}, and \\texttt{SL.xgboost} [@xgboost2023; @polley2023; @Ranger2017]. We created graphs, tables and output reports using the \\texttt{margot} package\n[@margot2024].\n\n#### Sensitivity Analysis Using the E-value\n\n> To assess the sensitivity of results to unmeasured confounding, we\nreport VanderWeele and Ding's ``E-value'' in all analyses\n[@vanderweele2017]. The E-value quantifies the minimum strength of association (on the risk ratio scale) that an unmeasured confounder would need to have with both the exposure\nand the outcome (after considering the measured covariates) to explain\naway the observed exposure-outcome association\n[@linden2020EVALUE; @vanderweele2020]. To\nevaluate the strength of evidence, we use the bound of the E-value 95\\%\nconfidence interval closest to 1.\n\n\n\n\n### Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreport::cite_packages()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  - Bulbulia J (2024). _margot: MARGinal Observational Treatment-effects_. doi:10.5281/zenodo.10907724 <https://doi.org/10.5281/zenodo.10907724>, R package version 1.0.37 Functions to obtain MARGinal Observational Treatment-effects from observational data., <https://go-bayes.github.io/margot/>.\n  - Chang W (2023). _extrafont: Tools for Using Fonts_. doi:10.32614/CRAN.package.extrafont <https://doi.org/10.32614/CRAN.package.extrafont>, R package version 0.19, <https://CRAN.R-project.org/package=extrafont>.\n  - Grolemund G, Wickham H (2011). \"Dates and Times Made Easy with lubridate.\" _Journal of Statistical Software_, *40*(3), 1-25. <https://www.jstatsoft.org/v40/i03/>.\n  - Müller K, Wickham H (2023). _tibble: Simple Data Frames_. doi:10.32614/CRAN.package.tibble <https://doi.org/10.32614/CRAN.package.tibble>, R package version 3.2.1, <https://CRAN.R-project.org/package=tibble>.\n  - R Core Team (2025). _R: A Language and Environment for Statistical Computing_. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>.\n  - Wickham H (2016). _ggplot2: Elegant Graphics for Data Analysis_. Springer-Verlag New York. ISBN 978-3-319-24277-4, <https://ggplot2.tidyverse.org>.\n  - Wickham H (2023). _forcats: Tools for Working with Categorical Variables (Factors)_. doi:10.32614/CRAN.package.forcats <https://doi.org/10.32614/CRAN.package.forcats>, R package version 1.0.0, <https://CRAN.R-project.org/package=forcats>.\n  - Wickham H (2023). _stringr: Simple, Consistent Wrappers for Common String Operations_. doi:10.32614/CRAN.package.stringr <https://doi.org/10.32614/CRAN.package.stringr>, R package version 1.5.1, <https://CRAN.R-project.org/package=stringr>.\n  - Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). \"Welcome to the tidyverse.\" _Journal of Open Source Software_, *4*(43), 1686. doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.\n  - Wickham H, François R, Henry L, Müller K, Vaughan D (2023). _dplyr: A Grammar of Data Manipulation_. doi:10.32614/CRAN.package.dplyr <https://doi.org/10.32614/CRAN.package.dplyr>, R package version 1.1.4, <https://CRAN.R-project.org/package=dplyr>.\n  - Wickham H, Henry L (2025). _purrr: Functional Programming Tools_. doi:10.32614/CRAN.package.purrr <https://doi.org/10.32614/CRAN.package.purrr>, R package version 1.0.4, <https://CRAN.R-project.org/package=purrr>.\n  - Wickham H, Hester J, Bryan J (2024). _readr: Read Rectangular Text Data_. doi:10.32614/CRAN.package.readr <https://doi.org/10.32614/CRAN.package.readr>, R package version 2.1.5, <https://CRAN.R-project.org/package=readr>.\n  - Wickham H, Vaughan D, Girlich M (2024). _tidyr: Tidy Messy Data_. doi:10.32614/CRAN.package.tidyr <https://doi.org/10.32614/CRAN.package.tidyr>, R package version 1.3.1, <https://CRAN.R-project.org/package=tidyr>.\n  - Xie Y (2025). _tinytex: Helper Functions to Install and Maintain TeX Live, and Compile LaTeX Documents_. R package version 0.57, <https://github.com/rstudio/tinytex>. Xie Y (2019). \"TinyTeX: A lightweight, cross-platform, and easy-to-maintain LaTeX distribution based on TeX Live.\" _TUGboat_, *40*(1), 30-32. <https://tug.org/TUGboat/Contents/contents40-1.html>.\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "09-content_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}