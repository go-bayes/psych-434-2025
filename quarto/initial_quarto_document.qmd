---
title: "Your Title"
abstract: |
  **Background**: (Brief few sentences)
  
  **Objectives**: 
    1. Estimate the causal effect of YOUR EXPOSURE on YOUR OUTCOMES measured one year later.
    2. Evaluate whether these effects vary across the population.
    3. Provide policy guidance on which individuals might benefit most.
  
  **Method**: We conducted a three-wave retrospective cohort study (waves XX-XXX, October XXXX--October XXXX) using data from the New Zealand Attitudes and Values Study, a nationally representative panel. Participants were eligible if they participated in the NZAVS in the baseline wave (XXXX, were under the age of 62, and were employed > 20 hours per week. We defined the exposure as (XXXX  > NUMBER on a 1-7 Likert Scale (1 = yes, 0 = no)). To address attrition, we applied inverse probability of censoring weights; to improve external validity, we applied weighted to the population distribution of Age, Ethnicity, and Gender. We computed expected mean outcomes for the population in each exposure condition (high XXXX/low XXXXX). Under standard causal assumptions of unconfoundedness, the contrast provides an unbiased average treatment effect. We then used causal forests to detect heterogeneity in these effects and employed policy tree algorithms to identify individuals ("strong responders") likely to experience the greatest benefits.
  
  **Results**:   Increasing XXXXX leads to XXXXX. Heterogeneous responses to (e.g. *Forgiveness*, *Personal Well-Being*, and *Life-Satisfaction*...) reveal structural variability in subpopulations...
  
  **Implications**: (Brief few sentences)
  **Keywords**: *Causal Inference*;  *Cross-validation*; *Distress*; *Employment*; *Longitudinal*; *Machine sLearning*; *Religion*; *Semi-parametric*; *Targeted Learning*.
author: 
  - name: YOUR NAME
    affiliation: Victoria University of Wellington, New Zealand
    email: XXXXX
    corresponding: yes
keywords: [Causal Inference, Cross-validation,...]
editor_options: 
  chunk_output_type: console
date: "last-modified"
fontfamily: libertinus
bibliography: references.bib
csl: apa7.csl
format:
  docx: 
    default: false
  pdf:
    pdf-engine: lualatex
    sanitise: true
    keep-tex: true
    link-citations: true
    colorlinks: true
    documentclass: article
    classoption: ["single column"]
    lof: false
    lot: false
    geometry:
      - top=30mm
      - left=25mm
      - heightrounded
      - headsep=22pt
      - headheight=11pt
      - footskip=33pt
      - ignorehead
      - ignorefoot
    header-includes:
      - \let\oldtabular\tabular
      - \renewcommand{\tabular}{\small\oldtabular}
      - \setlength{\tabcolsep}{4pt}  # adjust this value as needed
execute:
  echo: false
  warning: false
  include: true
  eval: true
---

```{r}
#| label: load-libraries
#| echo: false
#| include: false
#| eval: true

# ---- package setup -------------------------------------------------------
library(here)
pacman::p_load(
  boilerplate, margot, tinytex, extrafont,
  tidyverse, kableExtra, glue, patchwork,
  stringr, ggplot2, ggeffects, parameters,
  table1, here, knitr
)

# ---- copy resources to quarto -------------------------------------------
if (!file.exists(here::here("quarto", "apa7.csl"))) {
  file.copy("csl/apa7.csl", here::here("quarto", "apa7.csl"))
}
if (!file.exists(here::here("quarto", "references.bib"))) {
  file.copy("bibliography/references.bib", here::here("quarto", "references.bib"))
}

# ---- install GitHub packages if missing ----------------------------------
if (!requireNamespace("boilerplate", quietly = TRUE)) {
  install.packages("devtools")
  devtools::install_github("go-bayes/boilerplate")
}
if (!requireNamespace("margot", quietly = TRUE)) {
  install.packages("devtools")
  devtools::install_github("go-bayes/margot")
}

# ---- check package versions ---------------------------------------------
utils::packageVersion("margot")      # should be > 1.0.38
utils::packageVersion("boilerplate") # should be > 1.0.42

# ---- ensure reproducibility and load fonts --------------------------------
set.seed(123)
loadfonts(device = "all")

# ---- define paths and import data ----------------------------------------
push_mods             <- here::here("save_directory")
final_boilerplate_data <- here::here("final_boilerplate_data")
unified_db            <- boilerplate_import(data_path = final_boilerplate_data)

# check paths
# ---- inspect available boilerplate entries -------------------------------
cat(unified_db$methods$confounding_control$vanderweele)
cat(unified_db$methods$sample$nzavs)

# ---- read variable definitions -------------------------------------------
baseline_vars           <- margot::here_read("baseline_vars")
exposure_var            <- margot::here_read("exposure_var")
outcome_vars            <- margot::here_read("outcome_vars")

# ---- define study waves --------------------------------------------------
baseline_wave           <- margot::here_read("baseline_wave")
exposure_waves          <- margot::here_read("exposure_waves")
outcome_wave            <- margot::here_read("outcome_wave")

# ---- define study parameters ---------------------------------------------
study_years             <- "2018-2021"
name_exposure           <- here_read("name_exposure")
name_outcome_variables  <- "MY OUTCOME VARIABLES IN THIS STUDY"
name_exposure_lower     <- tolower(name_exposure)
name_exposure_lower

# ---- templates and thresholds --------------------------------------------
eligibility_template    <- "Participants were eligible if they participated in the {baseline wave}"
percent_missing_baseline <- margot::here_read("percent_missing_baseline")

# ---- read tables for manuscript ------------------------------------------
markdown_table_baseline  <- margot::here_read("baseline_table")
markdown_table_exposures <- margot::here_read("exposure_table")
markdown_table_outcomes  <- margot::here_read("outcomes_table")
margot_bind_tables_markdown <- margot::here_read("margot_bind_tables_markdown")
# ---- sample size information --------------------------------------------
n_total                  <- margot::here_read("n_total")
n_participants           <- here_read("n_participants")

# ---- variable labels and mappings ----------------------------------------
var_labels_measures      <- here_read("var_labels_measures")
label_mapping_all        <- here_read("label_mapping_all")

# ---- plot titles and analysis settings -----------------------------------
ate_title                <- here_read("ate_title")
flipped_names            <- here_read("flipped_names")
flipped_list             <- paste(flipped_names, collapse = ", ")

# ---- import data for visualisation --------------------------------------
original_df              <- margot::here_read('df_wide', push_mods)

# ---- define nice names and regimes ---------------------------------------
nice_name_exposure_variable <- stringr::str_to_sentence(name_exposure)
name_outcomes_lower          <- "multi-dimensional wellbeing"

# ---- define exposure thresholds and regimes ------------------------------
lower_cut               <- here_read("lower_cut")
upper_cut               <- here_read("upper_cut")
threshold               <- here_read("threshold")
inverse_threshold       <- here_read("inverse_threshold")
scale_range             <- margot::here_read("scale_range")

# create and check variables
value_exposure = glue::glue( threshold,"", upper_cut,", ", scale_range)
value_control =   glue::glue(inverse_threshold, upper_cut,", ", scale_range)

# regimes
name_control_regime_lower <- glue::glue("low {name_exposure_lower}")
value_exposure_regime     <- glue::glue("Set {name_exposure} {threshold} {upper_cut} {scale_range}")
value_control_regime      <- glue::glue("Set {name_exposure} {inverse_threshold} {upper_cut} {scale_range}")


contrast_template         <- "We used causal forests to estimate an average treatment effect as a contrast between *{name_control_regime_lower}* and *{name_exposure_lower}* on {name_outcomes_lower}."
contrast_text             <- glue(contrast_template)

#chedk
contrast_text
# ---- verify assumptions (positivity) -------------------------------------
transition_tables        <- margot::here_read("transition_tables")
transition_tables_binary <- here_read("transition_tables_binary")

# ---- generate measures text for methods section -------------------------
baseline_measures_text   <- boilerplate_generate_measures(
  variable_heading = "Baseline Covariates",
  variables        = baseline_vars,
  db               = unified_db,
  heading_level    = 3,
  subheading_level = 4,
  print_waves      = FALSE,
  label_mappings   = var_labels_measures
)
exposure_measures_text   <- boilerplate_generate_measures(
  variable_heading = "Exposure Variable",
  variables        = name_exposure,
  db               = unified_db,
  heading_level    = 3,
  subheading_level = 4,
  print_waves      = FALSE,
  label_mappings   = var_labels_measures
)
outcome_measures_text    <- boilerplate_generate_measures(
  variable_heading = "Outcome Variables",
  variables        = outcome_vars,
  db               = unified_db,
  heading_level    = 3,
  subheading_level = 4,
  print_waves      = FALSE,
  label_mappings   = var_labels_measures
)

# ---- exposure description from database --------------------------------
measures_exposure        <- glue::glue(unified_db$measures[[name_exposure]]$description)

# ---- set plot defaults for ate plots -------------------------------------
base_defaults_binary     <- list(
  type                   = "RD",
  title                  = ate_title,
  e_val_bound_threshold  = 1.2,
  colors                 = c(
    "positive"    = "#E69F00",
    "not reliable"= "grey50",
    "negative"    = "#56B4E9"
  ),
  x_offset               = -0.5,
  x_lim_lo               = -0.5,
  x_lim_hi               = 0.5,
  text_size              = 4,
  linewidth              = 0.5,
  estimate_scale         = 1,
  base_size              = 18,
  point_size             = 2,
  title_size             = 19,
  subtitle_size          = 16,
  legend_text_size       = 10,
  legend_title_size      = 10,
  include_coefficients   = FALSE
)

# ---- create plot options for outcomes -----------------------------------
outcomes_options_all     <- margot_plot_create_options(
  title         = "",
  base_defaults = base_defaults_binary,
  subtitle      = "",
  filename_prefix = "grf"
)

# ---- policy tree graph settings -----------------------------------------
decision_tree_defaults  <- list(
  span_ratio         = 0.3,
  text_size          = 3.8,
  y_padding          = 0.25,
  edge_label_offset  = 0.002,
  border_size        = 0.05
)

policy_tree_defaults    <- list(
  point_alpha            = 0.5,
  title_size             = 12,
  subtitle_size          = 12,
  axis_title_size        = 12,
  legend_title_size      = 12,
  split_line_color       = "red",
  split_line_alpha       = 0.8,
  split_label_color      = "red",
  split_label_nudge_factor = 0.007
)

# ---- load and check model results ---------------------------------------
ate_results           <- margot::here_read_qs("ate_results", push_mods)
margot::margot_size(ate_results)

# ---- create ate plots and interpretation --------------------------------
ate_results$plot
cat(ate_results$interpretation)

# ---- heterogeneity analysis ---------------------------------------------
models_binary_flipped_all <- here_read_qs("models_binary_flipped_all", push_mods)

# result_ominbus_hetero     <- margot_omnibus_hetero_test(
#   models_binary_flipped_all,
#   label_mapping  = label_mapping_all,
#   alpha          = 0.05,
#   detail_level   = "standard",
#   format         = "markdown"
# )
# result_ominbus_hetero$summary_table |> kbl("markdown")
# cat(result_ominbus_hetero$brief_interpretation)


# read corrected rate analysis
keep <- here_read("keep")
keep_autoc<- here_read("keep_autoc")
keep_qini<- here_read("keep_qini")

# pull the matching model keys (prefixed) for downstream plotting ------
model_keep <- paste0("model_", keep)
model_keep_autoc <- paste0("model_", keep_autoc)
model_keep_qini <- paste0("model_", keep_qini)
model_keep
model_keep_autoc
# Rate
rate_results <-
  margot_rate(
    models   = models_binary_flipped_all,
    policy   = "treat_best",
    label_mapping = label_mapping_all
  )
# show rate tables
rate_results$rate_autoc %>% kbl("markdown")
rate_results$rate_qini %>% kbl("markdown")

# generate textual interpretations for rate metrics
rate_interp <-
  margot_interpret_rate(
    rate_results,
    flipped_outcomes = flipped_names
    
  )
cat(rate_interp$autoc_results, "\n")
cat(rate_interp$qini_results, "\n")
cat(rate_interp$comparison, "\n")

# organise model groups by heterogeneity evidence
model_groups <- list(
  autoc  = rate_interp$autoc_model_names,
  qini   = rate_interp$qini_model_names,
  either = rate_interp$either_model_names
)
cli::cli_h1("rate metrics and interpretations complete ✔")


# ---- policy analysis with qini and trees -------------------------------
models_batch_2L            <- margot_policy(
  models_binary_flipped_all,
  save_plots         = FALSE,
  output_dir         = here::here(push_mods),
  decision_tree_args = decision_tree_defaults,
  policy_tree_args   = policy_tree_defaults,
  model_names        = model_keep_qini,
  max_depth          = 2L,
  original_df        = original_df,
  label_mapping      = label_mapping_all
)

qini_plots               <- lapply(seq_along(models_batch_2L), function(i) {
  models_batch_2L[[i]][[4]]
})

names(qini_plots)       <- model_keep_qini
interpretation_qini_curves_2L <- margot_interpret_qini(
  models_batch_2L,
  model_names        = model_keep_qini,
  label_mapping      = label_mapping_all
)

# obtain policy trees
policy_2L_corrected <- here_read_qs("policy_2L_corrected", push_mods)
interp_all_2L <- here_read("interp_all_2L")

## Your models # change first number to get more
policy_2L_corrected[[1]][[1]]
policy_2L_corrected[[2]][[1]]
interp_all_2L

# ---- define global variables for text generation ------------------------
global_vars <- list(
  name_exposure_variable     = nice_name_exposure_variable,
  n_total                    = n_total,
  n_participants             = n_participants,
  exposure_variable          = name_exposure,
  name_exposure_lower        = name_exposure_lower,
  name_control_regime_lower  = name_control_regime_lower,
  name_outcome_variables     = "Multi-dimensional Wellbeing",
  name_outcomes_lower        = name_outcomes_lower,
  name_exposure_capfirst     = nice_name_exposure_variable,
  measures_exposure          = measures_exposure,
  value_exposure_regime      = value_exposure_regime,
  value_control_regime       = value_control_regime,
  flipped_list               = flipped_list,
  appendix_explain_grf       = "D",
  appendix_assumptions_grf   = "F",
  name_exposure_threshold =  "1",
  name_control_threshold  =  "0",
  appendix_measures = "A",
  value_control              = value_control,     # ← named
  value_exposure             = value_exposure,    # ← named
  appendix_positivity        = "E",
  baseline_wave              = "NZAVS time 10, years 2018-2019",
  exposure_waves             = "NZAVS time 11, year 2019-2020",
  outcome_wave               = "NZAVS time 12, years 2020-2021",
  protocol_url               = "https://osf.io/ce4t9/",
  appendix_timeline = "A"
)
```

{{< pagebreak >}}

## Method

```{r, results='asis'}
#| eval: true
#| echo: false
library(boilerplate)
cat(
  boilerplate::boilerplate_generate_text(
    category     = "methods",      # ← choose the right top-level list
    sections     = c(
      "sample.nzavs",
      "target_population",
      "eligibility.standard",
      "causal_intervention.grf_simple_text",
      "analytic_approach.general_approach_cate_short",
      "exposure_indicator",
      "causal_identification_criteria",
      "confounding_control.vanderweele",
      "statistical_models.grf_short_explanation",
      "missing_data.missing_grf_simple",
      "sensitivity_analysis.short_evalue"
    ),
    global_vars  = global_vars,
    db           = unified_db
  )
)
```


{{< pagebreak >}}

## Results

### Average Treatement Effects



```{r}
#| label: fig-ate
#| fig-cap: "Average Treatment Effects on Multi-dimensional Wellbeing"
#| eval: true
#| echo: false
#| fig-height: 14
#| fig-width: 18
ate_results$plot
```

{{< pagebreak >}}

```{r}
#| label: tbl-outcomes
#| tbl-cap: "Average Treatment Effects on Multi-dimensional Wellbeing"
#| eval: true
#| echo: false

# ate_results$transformed_table|> kbl("markdown")
margot_bind_tables_markdown
```



```{r, results = 'asis'}
cat(ate_results$interpretation)
```




{{< pagebreak >}}

### Heterogeneous Treatment Effects: Policy Trees

```{r, results = 'asis'}
cat(interp_all_2L)
```


        
```{r}
#| label: fig-policy-1
#| fig-cap: "Decision Tree: Exercise"
#| eval: true
#| echo: false
#| fig-height: 16
#| fig-width: 9
policy_2L_corrected[[1]][[1]]
```



```{r}
#| label: fig-policy-2
#| fig-cap: "Decision Tree: Neighbourhood Community"
#| eval: true
#| echo: false
#| fig-height: 16
#| fig-width: 9
policy_2L_corrected[[2]][[1]]
```



## Discussion



```{r,  results='asis'}
#| eval: true
#| echo: false
cat(boilerplate_generate_text(
  category = "discussion",
  sections = c(
    "ethics.nzavs_2021_2027",
    "authors_statment_empty",
    "acknowlegements.nzavs_acknowledgements_2025",
    "nzavs_data_availabily"
  ),
  global_vars = list(
    exposure_variable = name_exposure
  ),
  db = unified_db
))
```



{{< pagebreak >}}

## Appendix A: Measures {#appendix-measures}


### Measures 

####  Covariate Measures 
```{r, results='asis'}
cat(baseline_measures_text)
```

#### Exposure Measures

```{r, results='asis'}
cat(exposure_measures_text)
```

#### Outcome Measures

```{r, results='asis'}
cat(outcome_measures_text)
```

## Appendix B: Sample {#appendix-sample}

@tbl-appendix-baseline presents sample demographic statistics.

::: {#tbl-appendix-baseline}
```{r, results = 'asis'}
#| eval: true
#| include: true
#| echo: false
markdown_table_baseline
```
Demographic statistics for New Zealand Attitudes and Values Cohort wave 2018.
:::


### Exposure Variable {#appendix-exposure} 

<!-- @tbl-sample-exposures presents sample statistics for the exposure variable, religious service attendance, during the baseline and exposure waves. This variable was not measured in part of NZAVS time 12 (years 2020-2021) and part of NZAVS time 13 (years 2021-2022). To address missingness, if a value was observed after NZAVS time 14, we carried the previous observation forward and created and NA indicator. If there was no future observation, the participant was treated as censored, and inverse probability of censoring weights were applied, following our standard method for handling missing observations (see mansucript **Method**/**Handling of Missing Data**). Here, our carry-forward imputation approach may result in conservative causal effect estimation because it introduces measurement error. However, this approach would not generally bias causal effect estimation away from the null because the measurement error is unsystematic and random and unrelated to the outcomes. -->


::: {#tbl-appendix-exposures}
```{r, results = 'asis'}
#| eval: true
#| include: true
#| echo: false

markdown_table_exposures

```
Demographic statistics for New Zealand Attitudes and Values Cohort waves 2018.
:::

{{< pagebreak >}}

### Outcome Variables {#appendix-outcomes} 

::: {#tbl-appendix-outcomes}
```{r, results = 'asis'}
#| eval: true
#| include: true
#| echo: false

markdown_table_outcomes

```
Outcome variables measured at baseline (NZAVS time 10, years 2018-2019, and time 15, years 2023-2024).
:::


{{< pagebreak >}}


### Appendix C: Transition Matrix to Check The Positivity Assumption {#appendix-transition}


```{r, results = 'asis'}
#| label: tbl-transition
#| tbl-cap: "Transition Matrix Showing Change"
#| eval: true
#| include: true
#| echo: false

transition_tables_binary$tables[[1]]
```

```{r, results = 'asis'}
cat(transition_tables_binary$explanation)
```


{{< pagebreak >}}


## Appendix D: Evidence of Heterogeneity {#appendix-cate-validation}


```{r, results='asis'}
#| eval: true
#| echo: false
cat(boilerplate::boilerplate_generate_text(
  category = "results",
  sections = c(
    "grf.interpretation_rate"
  ),
  global_vars = list(
    appendix_omnibus = "Appendix F",
    flipped_list = flipped_list
  ),
  db = unified_db
))
```



```{r, results='asis'}
#| label: tbl-rate-autoc
#| eval: true
#| echo: false
# view rate tables
cat(rate_interp$autoc_results)
```

```{r, results='asis'}
#| eval: true
#| echo: false
cat(rate_interp$qini_results)
```

```{r, results='asis'}
#| eval: true
#| echo: false
cat(rate_interp$comparison)
```


```{r}
#| label: fig-qini
#| fig-cap: "RATE AUTOC Graphs"
#| eval: true
#| echo: false
#| fig-height: 16
#| fig-width: 9
qini_plots[[1]]
```

```{r, results = 'asis'}
# only reliable results
cat(interpretation_qini_curves_2L$qini_explanation)
```

{{< pagebreak >}}


## References {.appendix-refs}





